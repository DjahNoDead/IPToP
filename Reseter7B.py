import os
import subprocess
import sys
import importlib.util

# ========== Configuration silencieuse des d√©pendances ==========
ESSENTIAL_PACKAGES = [
    ("rich", "rich"),
    ("tabulate", "tabulate"),
    ("packaging", "packaging"),
    ("psutil", "psutil"),
    ("importlib_metadata", "importlib.metadata"),
    ("setuptools", "pkg_resources")
]

class DependencyManager:
    """Gestionnaire silencieux des d√©pendances"""
    
    @staticmethod
    def _install_packages(packages):
        """Installation silencieuse des packages"""
        try:
            subprocess.run(
                [sys.executable, "-m", "pip", "install", "--quiet", "--disable-pip-version-check"] + packages,
                check=True,
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL
            )
            return True
        except subprocess.CalledProcessError:
            return False

    @classmethod
    def setup_environment(cls):
        """Configure l'environnement Python"""
        # Phase 1: Installation minimale silencieuse
        bootstrap_pkgs = [pkg for pkg, _ in ESSENTIAL_PACKAGES[:3]]
        if not cls._install_packages(bootstrap_pkgs):
            sys.exit("√âchec de l'installation des d√©pendances critiques")

        # Phase 2: V√©rification compl√®te avec feedback minimal
        from rich.console import Console
        console = Console()
        
        missing = []
        for pkg, import_name in ESSENTIAL_PACKAGES:
            if importlib.util.find_spec(import_name) is None:
                missing.append(pkg)
        
        if missing:
            console.print(f"üîç Installation des d√©pendances...", style="dim")
            if not cls._install_packages(missing):
                console.print("[red]‚úó √âchec de l'installation[/red]", style="bold")
                sys.exit(1)
            console.print("[green]‚úì Environnement configur√©[/green]", style="bold")

# Configuration initiale
DependencyManager.setup_environment()

# ========== Imports apr√®s installation ==========
from rich.console import Console
from rich.panel import Panel
import psutil
import time
import shutil
import tarfile
from datetime import datetime, timedelta
import fnmatch
import glob
import zipfile
import getpass
import logging
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.prompt import Confirm
from tabulate import tabulate
from rich.table import Table
from rich.text import Text
from rich.live import Live

# ========== Initialisation ==========
console = Console()

# Couleurs ANSI (si besoin ailleurs dans le script)
cyan = "\033[1;36m"
green = "\033[1;32m"
yellow = "\033[1;33m"
red = "\033[1;31m"
reset = "\033[0m"
magenta = "\033[35m"

# ========== Fonctions utilitaires ==========
def clear_screen():
    """Efface l'√©cran du terminal"""
    os.system('clear' if os.name != 'nt' else 'cls')

def typewriter(text, delay=0.02):
    """Affiche le texte caract√®re par caract√®re avec style."""
    for char in text:
        console.print(char, end="", style="bold cyan", soft_wrap=True)
        time.sleep(delay)
    print()

# ========== Affichage banni√®re stylis√©e ==========
def display_banner():
    banner_text = Text()
    banner_text.append("___ ____ _____     ____\n", style="bold cyan")
    banner_text.append("|_ _|  _ \\_   _|__ |  _ \\\n", style="bold cyan")
    banner_text.append(" | || |_) || |/ _ \\| |_) |\n", style="bold cyan")
    banner_text.append(" | ||  __/ | | (_) |  __/\n", style="bold cyan")
    banner_text.append("|___|_|    |_|\\___/|_|\n", style="bold cyan")
    banner_text.append("\n              Cleaner\n", style="bold green")
    banner_text.append("\nhttps://t.me/+mQxb0SaXMKUwYWQ0\n", style="bold blue")
    banner_text.append(" DjahNoDeadüëΩ", style="bold magenta")

    panel = Panel(banner_text, border_style="bright_yellow", title="[bold red]Welcome", subtitle="[bold white]LeC@fardüí™")

    with Progress(
        SpinnerColumn(style="bold green"),
        TextColumn("[progress.description]{task.description}"),
        transient=True,
    ) as progress:
        progress.add_task(description="Chargement du programme...", total=None)
        time.sleep(2)

    console.print(panel)

# ========== Point d'entr√©e principal ==========
def main():
    clear_screen()
    typewriter(">> Lancement du syst√®me de nettoyage en cours...\n", delay=0.03)
    time.sleep(1)
    display_banner()

if __name__ == "__main__":
    main()

def get_choice(min_val, max_val):
    """
    Demande √† l'utilisateur de choisir une option entre min_val et max_val
    avec gestion robuste des erreurs
    """
    while True:
        try:
            choice = int(input("‚ùì Votre choix : "))
            if min_val <= choice <= max_val:
                return choice
            console.print(f"[red]‚ùå Veuillez entrer un nombre entre {min_val} et {max_val}[/red]")
        except ValueError:
            console.print("[red]‚ùå Veuillez entrer un nombre valide[/red]")

# ==================== FONCTIONS DE NETOYAGE ====================

def show_python_modules_menu():
    """Menu unifi√© pour la gestion des modules Python"""
    menu_options = [
        "[1] Lister les modules install√©s",
        "[2] Installer un module sp√©cifique",
        "[3] Installer les modules essentiels",
        "[4] R√©parer l'environnement Python",
        "[5] Nettoyer les paquets corrompus",
        "[6] Retour au menu principal"
    ]
    
    console.print(Panel(
        "\n".join(menu_options),
        title="[bold cyan]GESTION DES MODULES PYTHON[/bold cyan]",
        border_style="blue"
    ))

def show_python_repair_submenu():
    """Sous-menu sp√©cialis√© pour la r√©paration"""
    repair_options = [
        "[1] R√©parer les modules manquants",
        "[2] Nettoyer les doublons (.dist-info)",
        "[3] Restaurer les m√©tadonn√©es",
        "[4] V√©rifier l'int√©grit√©",
        "[5] Retour"
    ]
    
    console.print(Panel(
        "\n".join(repair_options),
        title="[bold red]R√âPARATION AVANC√âE[/bold red]",
        border_style="red"
    ))

def manage_python_modules():
    """Fonction principale unifi√©e"""
    while True:
        show_python_modules_menu()
        choice = get_choice(1, 6)
        
        if choice == 1:
            manage_installed_modules_and_tools()
        elif choice == 2:
            module = input(f"{cyan}Nom du module √† installer : {reset}").strip()
            if module:
                subprocess.run(f"pip install {module}", shell=True)
        elif choice == 3:
            install_essential_modules()
        elif choice == 4:
            while True:
                show_python_repair_submenu()
                repair_choice = get_choice(1, 5)
                
                if repair_choice == 1:
                    repair_python_modules()
                elif repair_choice == 2:
                    clean_duplicate_dist_info()
                elif repair_choice == 3:
                    restore_dist_info_menu()
                elif repair_choice == 4:
                    scan_python_environment()
                elif repair_choice == 5:
                    break
        elif choice == 5:
            clean_invalid_distributions()
        elif choice == 6:
            break

        input(f"\n{yellow}Appuyez sur Entr√©e pour continuer...{reset}")
        clear_screen()
            
def install_module():
    """Installe un module Python sp√©cifique"""
    module = input("Nom du module √† installer : ").strip()
    if module:
        subprocess.run(f"pip install {module}", shell=True)

def install_essential_modules():
    """Installe les modules Python essentiels avec gestion des erreurs am√©lior√©e"""
    from rich.progress import Progress
    from rich.table import Table

    essentials = [
        # R√©seau et Internet
        ("requests", "Requ√™tes HTTP avanc√©es"),
        ("ping3", "Ping r√©seau simple et efficace"),
        ("urllib3", "Client HTTP bas niveau"),
        ("bs4", "BeautifulSoup4 - Parsing HTML/XML"),
        ("dnspython", "Requ√™tes DNS avanc√©es"),
        
        # S√©curit√© et chiffrement
        ("pycryptodomex", "Cryptographie robuste (version isol√©e)"),
        ("cryptography", "Cryptographie moderne"),
        ("hashlib", "Fonctions de hachage s√©curis√©es"),
        
        # Interface utilisateur
        ("rich", "Interfaces console riches et stylis√©es"),
        ("colorama", "Couleurs en console multiplateforme"),
        ("tqdm", "Barres de progression intuitives"),
        ("tabulate", "Affichage de tableaux clairs"),
        
        # Donn√©es et traitement
        ("numpy", "Calcul num√©rique performant"),
        ("pandas", "Manipulation de donn√©es avanc√©e"),
        ("matplotlib", "Visualisation de donn√©es"),
        
        # Utilitaires syst√®me
        ("psutil", "Monitoring syst√®me et processus"),
        ("pathlib", "Gestion moderne des chemins"),
        ("setuptools", "Packaging et distribution"),
        
        # D√©veloppement
        ("ipython", "Console interactive am√©lior√©e"),
        ("pylint", "V√©rification de code Python"),
        ("autopep8", "Formatage de code automatique")
    ]

    console.print(Panel("[bold cyan]üì¶ INSTALLATION DES MODULES ESSENTIELS[/bold cyan]", border_style="blue"))

    table = Table(show_header=True, header_style="bold magenta")
    table.add_column("N¬∞", style="cyan", width=4)
    table.add_column("Module", style="green")
    table.add_column("Description", style="yellow")

    for i, (module, desc) in enumerate(essentials, 1):
        table.add_row(str(i), module, desc)

    console.print(table)
    console.print(f"\n[cyan]0.[/cyan] Tout installer")
    console.print(f"[cyan]M.[/cyan] Menu principal\n")

    while True:
        choice = input(f"{cyan}Votre choix (0-{len(essentials)}, M) : {reset}").strip().upper()

        if choice == "M":
            return
        elif choice == "0":
            with Progress() as progress:
                task = progress.add_task("[cyan]Installation...", total=len(essentials))
                
                for module, _ in essentials:
                    progress.update(task, description=f"[green]Installation de {module}...")
                    try:
                        result = subprocess.run(
                            f"pip install --upgrade {module}",
                            shell=True,
                            capture_output=True,
                            text=True
                        )
                        if result.returncode == 0:
                            progress.console.print(f"[green]‚úî {module} install√© avec succ√®s[/green]")
                        else:
                            progress.console.print(f"[red]‚ùå √âchec pour {module}: {result.stderr}[/red]")
                    except Exception as e:
                        progress.console.print(f"[red]‚ùå Erreur avec {module}: {str(e)}[/red]")
                    progress.advance(task)
            break
        elif choice.isdigit() and 1 <= int(choice) <= len(essentials):
            module, desc = essentials[int(choice)-1]
            try:
                console.print(f"[yellow]Installation de {module}...[/yellow]")
                result = subprocess.run(
                    f"pip install --upgrade {module}",
                    shell=True,
                    capture_output=True,
                    text=True
                )
                if result.returncode == 0:
                    console.print(f"[green]‚úî {module} install√© avec succ√®s[/green]")
                else:
                    console.print(f"[red]‚ùå √âchec d'installation: {result.stderr}[/red]")
            except Exception as e:
                console.print(f"[red]‚ùå Erreur: {str(e)}[/red]")
            break
        else:
            console.print("[red]‚ùå Choix invalide. Veuillez r√©essayer.[/red]")

    input(f"\n{yellow}Appuyez sur Entr√©e pour continuer...{reset}")
    
# ==============================================
# 1. D√©tection √©tendue des outils
# ==============================================
RECON_TOOLS = {
    # Subdomain Enumeration
    "Subfinder": ["/data/data/com.termux/files/usr/bin/subfinder", "~/.config/subfinder"],
    "Sublist3r": ["/data/data/com.termux/files/usr/bin/sublist3r", "~/Sublist3r"],
    "Amass": ["/data/data/com.termux/files/usr/bin/amass", "~/.config/amass"],
    "Assetfinder": ["/data/data/com.termux/files/usr/bin/assetfinder"],
    "Findomain": ["/data/data/com.termux/files/usr/bin/findomain", "~/.findomain"],
    # HTTP/Web Tools
    "HTTPx": ["/data/data/com.termux/files/usr/bin/httpx"],
    "Gau": ["/data/data/com.termux/files/usr/bin/gau"],
    "Waybackurls": ["/data/data/com.termux/files/usr/bin/waybackurls"],
    # Network Scanners
    "Naabu": ["/data/data/com.termux/files/usr/bin/naabu"],
    "Nuclei": ["/data/data/com.termux/files/usr/bin/nuclei", "~/.nuclei"],
    "Katana": ["/data/data/com.termux/files/usr/bin/katana"],
    "Dnsx": ["/data/data/com.termux/files/usr/bin/dnsx"],
    # Pentesting Tools
    "Sqlmap": ["/data/data/com.termux/files/usr/bin/sqlmap"],
    "Metasploit": ["/data/data/com.termux/files/usr/bin/msfconsole", "~/.msf4"],
    "Nikto": ["/data/data/com.termux/files/usr/bin/nikto"],
}

# ==============================================
# 2. Nettoyage des d√©pendances globales
# ==============================================
def clean_global_deps():
    """Nettoie les d√©pendances globales Go et pip avec explications Rich"""
    console.print(Panel.fit(
        "üßº [bold cyan]Nettoyage des d√©pendances globales[/bold cyan]\n"
        "- Ce processus va :\n"
        "  ‚Ä¢ Vider le cache des modules Go\n"
        "  ‚Ä¢ Supprimer tous les modules Python install√©s globalement\n"
        "\n[bold yellow]Utilisez cette option si vous avez des erreurs de d√©pendance ou souhaitez repartir propre.[/bold yellow]",
        title="NETTOYAGE GLOBAL", border_style="blue"
    ))

    # Nettoyage Go
    console.print("[cyan]‚Üí Nettoyage du cache Go...[/cyan]")
    if subprocess.run("command -v go", shell=True).returncode == 0:
        subprocess.run("go clean -modcache", shell=True)
        console.print("[green]‚úî Cache Go vid√©[/green]")
    else:
        console.print("[yellow]‚Ñπ Go n‚Äôest pas install√©, rien √† nettoyer[/yellow]")

    # Nettoyage pip
    console.print("[cyan]‚Üí Suppression des modules Python globaux...[/cyan]")
    try:
        subprocess.run("pip freeze | xargs pip uninstall -y", shell=True, check=True)
        console.print("[green]‚úî Modules Python d√©sinstall√©s avec succ√®s[/green]")
    except subprocess.CalledProcessError as e:
        console.print(f"[red]‚ùå Erreur lors de la d√©sinstallation : {e}[/red]")

def deep_clean():
    standard_clean()

    console.print(Panel.fit(
        "üåÄ Nettoyage approfondi\n\n- Supprime caches, temporaires et logs\n- Vide ~/.cache, ~/tmp, apt et logs",
        title="NIVEAU 3 - APPROFONDI", border_style="cyan"
    ))

    subprocess.run("rm -rf ~/.cache/*", shell=True)
    subprocess.run("rm -rf ~/tmp/*", shell=True)
    subprocess.run("apt-get clean", shell=True)
    subprocess.run("find ~ -name '*.log' -delete", shell=True)

    console.print("[green]‚úî Nettoyage approfondi termin√©[/green]")
    
def standard_clean():
    light_clean()

    console.print(Panel.fit(
        "üßπ Nettoyage standard\n\n- Inclut le nettoyage l√©ger\n- Supprime Subfinder + r√©pertoire ~/go",
        title="NIVEAU 2 - STANDARD", border_style="cyan"
    ))

    subprocess.run("rm -f /data/data/com.termux/files/usr/bin/subfinder", shell=True)
    subprocess.run("rm -rf ~/go", shell=True)

    console.print("[green]‚úî Nettoyage standard termin√©[/green]")

def light_clean():
    console.print(Panel.fit(
        "üßΩ Nettoyage l√©ger\n\n- Supprime les modules Python non essentiels\n- Vide le cache pip",
        title="NIVEAU 1 - L√âGER", border_style="cyan"
    ))

    modules = ["dnspython", "colorama", "tabulate", "ping3", "tqdm", "requests", "pycryptodome"]
    for module in modules:
        console.print(f"[yellow]‚Üí Suppression de {module}[/yellow]")
        subprocess.run(f"pip uninstall -y {module}", shell=True, stdout=subprocess.DEVNULL)

    subprocess.run("pip cache purge", shell=True)
    console.print("[green]‚úî Modules Python supprim√©s + cache pip vid√©[/green]")

def clean_invalid_distributions():
    """
    Supprime les distributions Python corrompues ou invalides (~nommodule)
    rep√©r√©es dans le dossier site-packages.
    """
    site_packages = "/data/data/com.termux/files/usr/lib/python3.12/site-packages"
    if not os.path.exists(site_packages):
        console.print("[yellow]‚Ñπ Dossier site-packages introuvable[/yellow]")
        return

    corrupted = [f for f in os.listdir(site_packages) if f.startswith("~")]
    if not corrupted:
        console.print("[green]‚úÖ Aucun paquet corrompu d√©tect√©[/green]")
        return

    console.print(Panel.fit(
        f"[bold red]‚ö† D√©tection de distributions invalides :[/bold red]\n" +
        "\n".join(corrupted),
        title="NETTOYAGE CORRUPTION", border_style="red"
    ))

    for pkg in corrupted:
        path = os.path.join(site_packages, pkg)
        try:
            if os.path.isfile(path):
                os.remove(path)
            else:
                subprocess.run(f"rm -rf '{path}'", shell=True)
            console.print(f"[green]‚úî Supprim√© : {pkg}[/green]")
        except Exception as e:
            console.print(f"[red]‚ùå Erreur suppression {pkg}: {e}[/red]")

def scan_python_environment():
    """
    Analyse l‚Äôenvironnement Python :
    - Affiche les .dist-info pr√©sents
    - Demande confirmation pour suppression
    - Sauvegarde les fichiers dans ~/.backup-dist-info avant suppression
    """
    import shutil
    import os
    site_packages = "/data/data/com.termux/files/usr/lib/python3.12/site-packages"
    backup_dir = os.path.expanduser("~/.backup-dist-info")

    console.print(Panel(
        "üîé ANALYSE DE L‚ÄôENVIRONNEMENT PYTHON",
        border_style="cyan"
    ))

    if not os.path.exists(site_packages):
        console.print("[red]‚ùå Dossier site-packages introuvable[/red]")
        return

    dist_infos = [f for f in os.listdir(site_packages) if f.endswith(".dist-info")]
    if not dist_infos:
        console.print("[green]‚úÖ Aucun fichier .dist-info d√©tect√©[/green]")
        return

    # Affichage des .dist-info d√©tect√©s
    console.print(Panel("\n".join(dist_infos), title="üîÅ Fichiers .dist-info d√©tect√©s", border_style="yellow"))

    confirm = input(f"\n{yellow}‚ö† Voulez-vous les sauvegarder et les supprimer ? [y/n] : {reset}").strip().lower()
    if confirm not in ["y", "yes", "o", "oui"]:
        console.print("[cyan]‚Ü© Aucun fichier n‚Äôa √©t√© supprim√©[/cyan]")
        input(f"\n{yellow}Appuyez sur Entr√©e pour revenir au menu...{reset}")
        return

    # Cr√©er le dossier de sauvegarde si besoin
    os.makedirs(backup_dir, exist_ok=True)
    deleted = []

    for entry in dist_infos:
        src = os.path.join(site_packages, entry)
        dst = os.path.join(backup_dir, entry)

        try:
            if os.path.isdir(src):
                shutil.copytree(src, dst, dirs_exist_ok=True)
                shutil.rmtree(src)
            else:
                shutil.copy2(src, dst)
                os.remove(src)
            deleted.append(entry)
            console.print(f"[green]‚úî Sauvegard√© et supprim√© : {entry}[/green]")
        except Exception as e:
            console.print(f"[red]‚ùå Erreur pour {entry} : {e}[/red]")

    if deleted:
        console.print(Panel(
            f"[bold green]‚úÖ {len(deleted)} fichier(s) sauvegard√©(s) et supprim√©(s)[/bold green]\n"
            f"‚Üí Backup dans : {backup_dir}",
            border_style="green"
        ))
    else:
        console.print("[blue]‚Ñπ Aucun fichier supprim√©[/blue]")

    input(f"\n{yellow}Appuyez sur Entr√©e pour revenir au menu...{reset}")

def restore_dist_info_backups():
    """
    Permet de restaurer un fichier .dist-info depuis ~/.backup-dist-info vers site-packages.
    """
    import shutil
    import os

    backup_dir = os.path.expanduser("~/.backup-dist-info")
    site_packages = "/data/data/com.termux/files/usr/lib/python3.12/site-packages"

    if not os.path.exists(backup_dir):
        console.print("[red]‚ùå Aucun dossier de sauvegarde trouv√©[/red]")
        return

    backups = sorted(os.listdir(backup_dir))
    if not backups:
        console.print("[yellow]‚ö† Aucune sauvegarde .dist-info disponible[/yellow]")
        return

    console.print(Panel("[bold cyan]üì¶ FICHIERS DISPONIBLES √Ä LA RESTAURATION[/bold cyan]", border_style="blue"))
    for i, b in enumerate(backups, 1):
        console.print(f"[cyan]{i}.[/cyan] {b}")

    console.print(f"\n[cyan]0.[/cyan] Annuler")

    choice = input(f"{yellow}Quel fichier souhaitez-vous restaurer ? (1-{len(backups)} ou 0) : {reset}").strip()
    if not choice.isdigit() or int(choice) < 0 or int(choice) > len(backups):
        console.print("[red]‚ùå Choix invalide[/red]")
        return
    if choice == "0":
        console.print("[blue]‚Ü© Restauration annul√©e[/blue]")
        return

    selected = backups[int(choice)-1]
    src = os.path.join(backup_dir, selected)
    dst = os.path.join(site_packages, selected)

    try:
        if os.path.exists(dst):
            console.print(f"[yellow]‚ö† Le fichier existe d√©j√† dans site-packages : {selected}[/yellow]")
            overwrite = input(f"{yellow}Remplacer ? [y/n] : {reset}").strip().lower()
            if overwrite not in ["y", "yes", "o", "oui"]:
                console.print("[cyan]‚Ü© Restauration annul√©e[/cyan]")
                return
            if os.path.isdir(dst):
                shutil.rmtree(dst)
            else:
                os.remove(dst)

        if os.path.isdir(src):
            shutil.copytree(src, dst)
        else:
            shutil.copy2(src, dst)

        console.print(f"[green]‚úî Restauration r√©ussie : {selected}[/green]")

    except Exception as e:
        console.print(f"[red]‚ùå Erreur de restauration : {e}[/red]")

    input(f"\n{yellow}Appuyez sur Entr√©e pour revenir au menu...{reset}")

def repair_python_modules():
    from importlib.util import find_spec
    essentials = [
        ("requests", "HTTP"),
        ("colorama", "Couleurs console"),
        ("tqdm", "Barres de progression"),
        ("dnspython", "Requ√™tes DNS"),
        ("tabulate", "Tableaux"),
        ("rich", "Affichage CLI stylis√©"),
        ("pycryptodomex", "Cryptographie isol√©e"),
        ("beautifulsoup4", "Analyse HTML/XML")
    ]

    console.print(Panel(
        "üîß V√âRIFICATION DES MODULES\n\nRecherche des modules absents ou cass√©s...",
        title="R√âPARATION PYTHON", border_style="cyan"
    ))

    missing = []
    for mod, _ in essentials:
        mod_import = "bs4" if mod == "beautifulsoup4" else mod
        if not find_spec(mod_import):
            missing.append(mod)

    if not missing:
        console.print("[green]‚úÖ Aucun module manquant[/green]")
        return
    else:
        console.print(f"[yellow]üîç Modules √† r√©installer : {', '.join(missing)}[/yellow]")

    confirm = input(f"{yellow}‚ö† Confirmer la r√©paration ? [y/n] : {reset}").strip().lower()
    if confirm not in ["y", "yes", "o", "oui"]:
        console.print("[red]‚ùå R√©paration annul√©e[/red]")
        return

    for mod in missing:
        console.print(f"[cyan]‚Üí R√©installation de {mod}...[/cyan]")
        result = subprocess.run(f"pip install --upgrade {mod}", shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            console.print(f"[green]‚úî {mod} install√© avec succ√®s[/green]")
        else:
            console.print(f"[red]‚ùå Erreur : {result.stderr}[/red]")

    input(f"\n{yellow}Appuyez sur Entr√©e pour continuer...{reset}")
    
def auto_repair_python_environment():
    """
    R√©paration compl√®te de l‚Äôenvironnement Python :
    - Supprime les paquets corrompus (~xxx)
    - R√©installe les modules essentiels manquants
    - Affiche les √©tapes avec Rich
    """
    from importlib.util import find_spec

    essentials = [
        ("requests", "HTTP"),
        ("colorama", "Console color√©e"),
        ("tqdm", "Progress bar"),
        ("dnspython", "DNS"),
        ("tabulate", "Tableaux"),
        ("rich", "Affichage CLI"),
        ("pycryptodome", "Crypto classique"),
        ("pycryptodomex", "Crypto isol√©e"),
        ("beautifulsoup4", "HTML parsing")
    ]

    site_packages = "/data/data/com.termux/files/usr/lib/python3.12/site-packages"

    console.print(Panel.fit(
        "üõ† [bold cyan]R√âPARATION AUTOMATIQUE DE PYTHON[/bold cyan]\n\n"
        "- Supprime les paquets corrompus (~xxx)\n"
        "- R√©installe les modules essentiels manquants",
        title="AUTO-REPAIR PYTHON", border_style="blue"
    ))

    confirm = input(f"{yellow}‚ö† Confirmer la r√©paration compl√®te ? [y/n] : {reset}").strip().lower()
    if confirm not in ["y", "yes", "o", "oui"]:
        console.print("[red]‚ùå R√©paration automatique annul√©e[/red]")
        return

    # 1. Suppression des paquets invalides
    if os.path.exists(site_packages):
        corrupted = [f for f in os.listdir(site_packages) if f.startswith("~")]
        for c in corrupted:
            try:
                full = os.path.join(site_packages, c)
                subprocess.run(f"rm -rf '{full}'", shell=True)
                console.print(f"[green]‚úî Supprim√© : {c}[/green]")
            except Exception as e:
                console.print(f"[red]‚ùå Erreur suppression {c}: {e}[/red]")
    else:
        console.print("[yellow]‚ö† Dossier site-packages introuvable[/yellow]")

    # 2. V√©rification des modules essentiels
    missing = []
    for mod, _ in essentials:
        mod_import = "bs4" if mod == "beautifulsoup4" else mod
        if not find_spec(mod_import):
            missing.append(mod)

    if not missing:
        console.print("[green]‚úÖ Tous les modules essentiels sont pr√©sents[/green]")
    else:
        console.print(f"[yellow]üîç Modules √† r√©installer : {', '.join(missing)}[/yellow]")
        for mod in missing:
            console.print(f"[cyan]‚Üí Installation de {mod}...[/cyan]")
            result = subprocess.run(f"pip install --upgrade {mod}", shell=True, capture_output=True, text=True)
            if result.returncode == 0:
                console.print(f"[green]‚úî {mod} install√© avec succ√®s[/green]")
            else:
                console.print(f"[red]‚ùå Erreur avec {mod} : {result.stderr.strip()}[/red]")

    input(f"\n{yellow}Appuyez sur Entr√©e pour revenir au menu...{reset}")

def get_folder_size(path):
    """Calcule la taille totale d'un dossier en octets"""
    total = 0
    for dirpath, _, filenames in os.walk(path):
        for f in filenames:
            fp = os.path.join(dirpath, f)
            if os.path.exists(fp):
                total += os.path.getsize(fp)
    return total

def clean_duplicate_dist_info():
    """
    Supprime les .dist-info obsol√®tes ou redondants,
    en conservant uniquement la version la plus r√©cente pour chaque module.
    """
    import re
    site_packages = "/data/data/com.termux/files/usr/lib/python3.12/site-packages"

    if not os.path.exists(site_packages):
        console.print("[red]‚ùå Dossier site-packages introuvable[/red]")
        return

    console.print(Panel(
        "üßπ [bold cyan]NETTOYAGE DES FICHIERS .dist-info[/bold cyan]\n\n"
        "Suppression des m√©tadonn√©es de modules en double ou anciens",
        title="NETTOYAGE dist-info", border_style="blue"
    ))

    dist_infos = [f for f in os.listdir(site_packages) if f.endswith(".dist-info")]
    modules = {}

    # Regrouper les dist-info par module
    for item in dist_infos:
        match = re.match(r"([a-zA-Z0-9_\-]+)-(\d+(?:\.\d+)+)", item)
        if match:
            name, version = match.groups()
            modules.setdefault(name.lower(), []).append((version, item))

    deleted = []
    for name, versions in modules.items():
        if len(versions) > 1:
            # Trier les versions (ordre naturel)
            versions.sort(key=lambda x: list(map(int, re.findall(r"\d+", x[0]))))
            # Garder la version la plus r√©cente
            to_delete = versions[:-1]
            for _, folder in to_delete:
                full_path = os.path.join(site_packages, folder)
                try:
                    subprocess.run(f"rm -rf '{full_path}'", shell=True)
                    deleted.append(folder)
                    console.print(f"[green]‚úî Supprim√© : {folder}[/green]")
                except Exception as e:
                    console.print(f"[red]‚ùå Erreur suppression {folder}: {e}[/red]")

    if not deleted:
        console.print("[green]‚úÖ Aucun doublon d√©tect√© ou supprim√©[/green]")

    input(f"\n{yellow}Appuyez sur Entr√©e pour revenir au menu...{reset}")

def backup_termux_alternative():
    """Sauvegarde fiable avec d√©tection automatique du chemin Termux"""
    from rich.progress import (
        Progress, BarColumn, TextColumn, 
        TimeRemainingColumn, TaskProgressColumn
    )
    
    # 1. D√©tection du chemin Termux (multiples m√©thodes)
    possible_paths = [
        os.path.expanduser("$PREFIX/../../files"),  # Standard Termux
        "/data/data/com.termux/files",              # Chemin Android
        os.path.expanduser("~/../usr"),             # Alternative
        "/usr/local/lib/termux/files"               # Cas particuliers
    ]
    
    source_dir = None
    for path in possible_paths:
        if os.path.exists(path):
            source_dir = path
            break
    
    if not source_dir:
        console.print(Panel(
            "[red]‚ùå INSTALLATION TERMUX INTROUVABLE[/red]\n\n"
            "Le script n'a pas pu localiser les fichiers Termux.\n"
            "Essayez cette commande manuelle :\n"
            "[cyan]tar -czf /sdcard/termux_backup.tar.gz /data/data/com.termux/files[/cyan]\n\n"
            "Chemins test√©s :\n" + 
            "\n".join(f"- {path}" for path in possible_paths),
            border_style="red"
        ))
        input("\nAppuyez sur Entr√©e pour continuer...")
        return

    # 2. Configuration de la sauvegarde
    backup_dir = "/sdcard/Termux_Backups"
    os.makedirs(backup_dir, exist_ok=True)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_path = os.path.join(backup_dir, f"termux_full_{timestamp}.tar.gz")

    # 3. Interface utilisateur
    console.print(Panel.fit(
        f"[bold cyan]üíæ SAUVEGARDE COMPL√àTE[/bold cyan]\n"
        f"Source : [yellow]{source_dir}[/yellow]\n"
        f"Destination : [cyan]{backup_path}[/cyan]",
        border_style="blue"
    ))

    if not Confirm.ask("  Confirmer la sauvegarde ?", default=False):
        return

    try:
        # 4. V√©rification de l'espace
        console.print("[dim]Calcul de l'espace n√©cessaire...[/dim]")
        size_cmd = f"du -sb {source_dir} | cut -f1"
        try:
            termux_size = int(subprocess.check_output(size_cmd, shell=True, text=True).strip())
        except:
            termux_size = 1000000000  # Valeur par d√©faut

        free_space = shutil.disk_usage("/sdcard").free
        if termux_size * 1.5 > free_space:
            raise ValueError(
                f"Espace insuffisant\n"
                f"N√©cessaire : ~{termux_size*1.5/1024/1024:.1f} MB\n"
                f"Disponible : {free_space/1024/1024:.1f} MB"
            )

        # 5. Sauvegarde avec feedback
        with Progress(
            TextColumn("[progress.description]{task.description}"),
            BarColumn(bar_width=30),
            TaskProgressColumn(),
            TextColumn("‚Ä¢"),
            TimeRemainingColumn(),
            transient=True
        ) as progress:
            task = progress.add_task("[cyan]Sauvegarde...", total=termux_size)
            
            cmd = f"tar -czf {backup_path} -C {os.path.dirname(source_dir)} {os.path.basename(source_dir)}"
            proc = subprocess.Popen(
                cmd,
                shell=True,
                stderr=subprocess.PIPE,
                stdout=subprocess.DEVNULL,
                text=True
            )
            
            # Simulation de progression (tar ne donne pas de vraie progression)
            while proc.poll() is None:
                if os.path.exists(backup_path):
                    progress.update(task, completed=os.path.getsize(backup_path))
                time.sleep(0.5)
            
            if proc.returncode != 0:
                error = proc.stderr.read()
                if "file changed while reading" in error:
                    console.print("[yellow]‚ö† Certains fichiers ont √©t√© modifi√©s pendant la sauvegarde[/yellow]")
                raise subprocess.CalledProcessError(proc.returncode, cmd, error)

        # 6. Validation finale
        if os.path.getsize(backup_path) < 100000000:  # 100MB minimum
            raise ValueError(f"Archive trop petite ({os.path.getsize(backup_path)/1024/1024:.1f} MB)")
        
        console.print(Panel(
            f"[bold green]‚úÖ SAUVEGARDE VALID√âE[/bold green]\n"
            f"‚Ä¢ Taille : [cyan]{os.path.getsize(backup_path)/1024/1024:.1f} MB[/cyan]\n"
            f"‚Ä¢ Emplacement : [cyan]{backup_path}[/cyan]",
            border_style="green"
        ))
        
    except Exception as e:
        console.print(Panel(
            f"[bold red]‚ùå √âCHEC DE SAUVEGARDE[/bold red]\n"
            f"Erreur : {str(e)}\n\n"
            f"[yellow]Solutions :[/yellow]\n"
            f"1. Red√©marrez Termux\n"
            f"2. V√©rifiez l'espace (df -h)\n"
            f"3. Sauvegarde manuelle :\n"
            f"[dim]tar -czf /sdcard/backup_manual.tar.gz /data/data/com.termux/files[/dim]",
            border_style="red"
        ))
        if os.path.exists(backup_path):
            os.remove(backup_path)
    finally:
        input("\nAppuyez sur Entr√©e pour continuer...")

def restore_all_dist_info_backups():
    """
    Restaure automatiquement tous les fichiers .dist-info sauvegard√©s depuis ~/.backup-dist-info.
    """
    import shutil
    import os

    backup_dir = os.path.expanduser("~/.backup-dist-info")
    site_packages = "/data/data/com.termux/files/usr/lib/python3.12/site-packages"

    if not os.path.exists(backup_dir):
        console.print("[red]‚ùå Aucun dossier de sauvegarde trouv√©[/red]")
        return

    files = sorted(os.listdir(backup_dir))
    if not files:
        console.print("[yellow]‚ö† Aucun fichier .dist-info √† restaurer[/yellow]")
        return

    console.print(Panel(
        f"üì¶ {len(files)} fichier(s) seront restaur√©s dans site-packages",
        title="RESTAURATION TOTALE", border_style="cyan"
    ))

    confirm = input(f"{yellow}‚ö† Confirmer la restauration de tous les fichiers ? [y/n] : {reset}").strip().lower()
    if confirm not in ["y", "yes", "o", "oui"]:
        console.print("[cyan]‚Ü© Restauration annul√©e[/cyan]")
        return

    restored = []

    for file in files:
        src = os.path.join(backup_dir, file)
        dst = os.path.join(site_packages, file)

        try:
            if os.path.exists(dst):
                if os.path.isdir(dst):
                    shutil.rmtree(dst)
                else:
                    os.remove(dst)

            if os.path.isdir(src):
                shutil.copytree(src, dst)
            else:
                shutil.copy2(src, dst)

            restored.append(file)
            console.print(f"[green]‚úî Restaur√© : {file}[/green]")

        except Exception as e:
            console.print(f"[red]‚ùå Erreur restauration {file} : {e}[/red]")

    console.print(Panel(
        f"[bold green]‚úÖ {len(restored)} fichier(s) restaur√©(s)[/bold green]",
        title="R√âSUM√â", border_style="green"
    ))

    input(f"\n{yellow}Appuyez sur Entr√©e pour revenir au menu...{reset}")

def restore_dist_info_menu():
    """
    Menu unique pour restaurer un ou tous les fichiers .dist-info supprim√©s.
    Options :
    - Restaurer un fichier par num√©ro
    - Restaurer tous les fichiers [T]
    - Annuler [0]
    """
    import shutil
    import os

    backup_dir = os.path.expanduser("~/.backup-dist-info")
    site_packages = "/data/data/com.termux/files/usr/lib/python3.12/site-packages"

    if not os.path.exists(backup_dir):
        console.print("[red]‚ùå Aucun dossier de sauvegarde trouv√©[/red]")
        return

    backups = sorted(os.listdir(backup_dir))
    if not backups:
        console.print("[yellow]‚ö† Aucun fichier .dist-info √† restaurer[/yellow]")
        return

    console.print(Panel(
        "[bold cyan]üì¶ RESTAURATION DE FICHIERS .dist-info[/bold cyan]",
        border_style="blue"
    ))

    for i, b in enumerate(backups, 1):
        console.print(f"[cyan]{i}.[/cyan] {b}")
    console.print("\n[cyan]T.[/cyan] Restaurer tous")
    console.print("[cyan]0.[/cyan] Annuler\n")

    choice = input(f"{yellow}Quel fichier souhaitez-vous restaurer ? (1-{len(backups)}, T, ou 0) : {reset}").strip().upper()

    if choice == "0":
        console.print("[blue]‚Ü© Restauration annul√©e[/blue]")
        return
    elif choice == "T":
        confirm = input(f"{yellow}‚ö† Confirmer la restauration de tous les fichiers ? [y/n] : {reset}").strip().lower()
        if confirm not in ["y", "yes", "o", "oui"]:
            console.print("[cyan]‚Ü© Restauration annul√©e[/cyan]")
            return

        restored = []
        for f in backups:
            src = os.path.join(backup_dir, f)
            dst = os.path.join(site_packages, f)
            try:
                if os.path.exists(dst):
                    if os.path.isdir(dst):
                        shutil.rmtree(dst)
                    else:
                        os.remove(dst)
                if os.path.isdir(src):
                    shutil.copytree(src, dst)
                else:
                    shutil.copy2(src, dst)
                restored.append(f)
                console.print(f"[green]‚úî Restaur√© : {f}[/green]")
            except Exception as e:
                console.print(f"[red]‚ùå Erreur : {f} ‚Üí {e}[/red]")

        console.print(Panel(
            f"[bold green]‚úÖ {len(restored)} fichier(s) restaur√©(s)[/bold green]",
            border_style="green"
        ))
    elif choice.isdigit() and 1 <= int(choice) <= len(backups):
        selected = backups[int(choice) - 1]
        src = os.path.join(backup_dir, selected)
        dst = os.path.join(site_packages, selected)

        if os.path.exists(dst):
            confirm = input(f"{yellow}‚ö† Le fichier existe d√©j√†. Remplacer ? [y/n] : {reset}").strip().lower()
            if confirm not in ["y", "yes", "o", "oui"]:
                console.print("[cyan]‚Ü© Restauration annul√©e[/cyan]")
                return
            if os.path.isdir(dst):
                shutil.rmtree(dst)
            else:
                os.remove(dst)

        try:
            if os.path.isdir(src):
                shutil.copytree(src, dst)
            else:
                shutil.copy2(src, dst)
            console.print(f"[green]‚úî {selected} restaur√© avec succ√®s[/green]")
        except Exception as e:
            console.print(f"[red]‚ùå Erreur : {e}[/red]")
    else:
        console.print("[red]‚ùå Choix invalide[/red]")

    input(f"\n{yellow}Appuyez sur Entr√©e pour revenir au menu...{reset}")

def send_notification(title, message, success=True):
    icon = "backup" if success else "warning"
    color = "#4CAF50" if success else "#F44336"
    
    subprocess.run(
        f"""termux-notification \
        -t "{title}" \
        -c "{message}" \
        --icon "{icon}" \
        --led-color "{color}" \
        --priority high""",
        shell=True,
        stderr=subprocess.PIPE
    )

# Exemple d'usage :
send_notification("Backup Termux", "Sauvegarde configs termin√©e")

# ==============================================
# 3. Gestion des processus en cours
# ==============================================
def kill_running_process(process_name):
    """Termine un processus en cours d'ex√©cution"""
    try:
        result = subprocess.run(f"pidof {process_name}", shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            pids = result.stdout.strip().split()
            for pid in pids:
                subprocess.run(f"kill -9 {pid}", shell=True)
                log_action("Processus termin√©", f"{process_name} (PID:{pid})")
    except Exception as e:
        log_action("Erreur", f"Impossible de terminer {process_name}: {str(e)}")

def show_restore_menu():
    """Menu des options de restauration"""
    menu_options = [
        "[1] Restauration standard", 
        "[2] Restauration des configurations",
        "[3] Restauration brute (tout Termux)",
        "[4] Restauration depuis stockage externe",
        "[5] Retour"
    ]
    
    console.print(Panel(
        "\n".join(menu_options),
        title="[bold cyan]MENU DE RESTAURATION[/bold cyan]",
        border_style="yellow"
    ))
    
# ==========. SAUVEGARDE ET RESTAURATION =======================

def backup_termux():
    """Sauvegarde COMPL√àTE et FIABLE de Termux"""
    from datetime import datetime
    import tarfile
    import subprocess

    # 1. Configuration
    backup_dir = os.path.expanduser("~/.termux_backups")
    os.makedirs(backup_dir, exist_ok=True)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_name = f"termux_full_{timestamp}.tar.gz"
    backup_path = os.path.join(backup_dir, backup_name)

    # 2. Pr√©paration des √©l√©ments √† sauvegarder
    essential_items = [
        # Fichiers de configuration
        "~/.termux",
        "~/.bashrc",
        "~/.zshrc",
        "~/.profile",
        "~/.vimrc",
        "~/.gitconfig",
        
        # Dossiers importants
        "~/.config",
        "~/.ssh",
        "~/.local/share",
        "~/bin",
        "~/scripts",
        "~/projects",
        
        # Donn√©es Termux
        "~/../usr/etc/termux",
        "~/../usr/var/lib/termux"
    ]

    # 3. V√©rification des √©l√©ments
    console.print(Panel("[bold]V√âRIFICATION DES FICHIERS[/bold]", style="blue"))
    valid_items = []
    for item in essential_items:
        path = os.path.expanduser(item)
        if os.path.exists(path):
            size = get_folder_size(path) if os.path.isdir(path) else os.path.getsize(path)
            valid_items.append((path, os.path.basename(path), size))
            console.print(f"[green]‚úì {item.ljust(20)} ({human_size(size)})[/green]")
        else:
            console.print(f"[yellow]‚ö† {item.ljust(20)} (absent)[/yellow]")

    if not valid_items:
        console.print("[red]‚ùå Aucun √©l√©ment valide √† sauvegarder ![/red]")
        return

    # 4. Sauvegarde des paquets
    console.print("[cyan]‚Üí Sauvegarde de la liste des paquets...[/cyan]")
    pkg_list_path = os.path.join(backup_dir, f"pkg_list_{timestamp}.txt")
    with open(pkg_list_path, "w") as f:
        subprocess.run("pkg list-installed", shell=True, stdout=f)

    # 5. Cr√©ation de l'archive
    total_size = sum(item[2] for item in valid_items)
    console.print(Panel(
        f"[bold]D√âBUT DE LA SAUVEGARDE COMPL√àTE[/bold]\n"
        f"‚Ä¢ Destination: [cyan]{backup_path}[/cyan]\n"
        f"‚Ä¢ Taille estim√©e: [yellow]{human_size(total_size)}[/yellow]\n"
        f"‚Ä¢ √âl√©ments inclus: {len(valid_items)}",
        style="blue"
    ))

    try:
        with Progress() as progress:
            task = progress.add_task("[cyan]Cr√©ation de l'archive...", total=total_size)
            
            with tarfile.open(backup_path, "w:gz") as tar:
                # Ajouter les fichiers/dossiers
                for path, arcname, size in valid_items:
                    if os.path.isdir(path):
                        for root, dirs, files in os.walk(path):
                            for file in files:
                                file_path = os.path.join(root, file)
                                rel_path = os.path.join(arcname, os.path.relpath(file_path, path))
                                tar.add(file_path, arcname=rel_path)
                                progress.update(task, advance=os.path.getsize(file_path))
                    else:
                        tar.add(path, arcname=arcname)
                        progress.update(task, advance=size)
                
                # Ajouter la liste des paquets
                tar.add(pkg_list_path, arcname="pkg_list.txt")

        # V√©rification finale
        if os.path.getsize(backup_path) == 0:
            raise ValueError("Archive vide cr√©√©e")

        # Rapport
        console.print(Panel(
            f"[bold green]‚úÖ SAUVEGARDE COMPL√àTE R√âUSSIE[/bold green]\n\n"
            f"‚Ä¢ Fichier: [cyan]{backup_name}[/cyan]\n"
            f"‚Ä¢ Taille: [yellow]{human_size(os.path.getsize(backup_path))}[/yellow]\n"
            f"‚Ä¢ Contenu: {len(valid_items)} √©l√©ments + liste des paquets\n"
            f"‚Ä¢ Emplacement: {backup_dir}",
            border_style="green"
        ))

    except Exception as e:
        console.print(Panel(
            f"[bold red]‚ùå √âCHEC DE SAUVEGARDE[/bold red]\n\n"
            f"Erreur: {str(e)}\n"
            f"Chemin: {backup_path}",
            border_style="red"
        ))
        if os.path.exists(backup_path):
            os.remove(backup_path)
        if os.path.exists(pkg_list_path):
            os.remove(pkg_list_path)
        return

    # Nettoyage
    if os.path.exists(pkg_list_path):
        os.remove(pkg_list_path)

    # V√©rification suppl√©mentaire
    is_valid, msg = verify_backup(backup_path)
    if is_valid:
        console.print(f"[green]‚úì V√©rification: {msg}[/green]")
    else:
        console.print(f"[red]‚ùå Probl√®me d√©tect√©: {msg}[/red]")

    input("\nAppuyez sur Entr√©e pour continuer...")

def backup_termux_standard():
    """Sauvegarde standard compl√®te avec exclusions intelligentes et v√©rifications"""
    try:
        home = os.path.expanduser("~")
        backup_dir = os.path.join(home, ".termux_backups")
        os.makedirs(backup_dir, exist_ok=True)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_file = os.path.join(backup_dir, f"termux_std_{timestamp}.tar.gz")

        # 1. Configuration des exclusions
        EXCLUDE_PATTERNS = [
            '*.tmp', '*.log', '*cache*',
            '*.thumbnails*', '/Android/*',
            '/.cache/*', '/temp/*', '/.termux_backups/*'
        ]

        # 2. Recherche des fichiers utilisateur
        console.print("[cyan]üîç Recherche des fichiers √† sauvegarder...[/cyan]")
        cmd = f"""
        find {home} -type f \
            ! -path '{home}/.termux_backups/*' \
            ! -path '{home}/../usr/*' \
            -print0
        """
        try:
            files = subprocess.check_output(cmd, shell=True, executable='/bin/bash', text=True).split('\0')[:-1]
            files = [f for f in files if not any(fnmatch.fnmatch(f, p) for p in EXCLUDE_PATTERNS)]
        except subprocess.CalledProcessError as e:
            raise ValueError(f"Erreur recherche fichiers : {e.stderr}")

        if not files:
            raise ValueError("Aucun fichier utilisateur valide trouv√©")

        # 3. Estimation de la taille
        total_size = sum(os.path.getsize(f) for f in files if os.path.isfile(f)) / (1024**2)
        console.print(f"[yellow]‚Ñπ Taille estim√©e : {total_size:.1f} MB[/yellow]")

        # 4. Cr√©ation de l'archive avec barre de progression
        with Progress() as progress:
            task = progress.add_task("[green]Cr√©ation de l'archive...", total=len(files))
            
            with tarfile.open(backup_file, "w:gz") as tar:
                for file_path in files:
                    try:
                        if os.path.exists(file_path) and os.path.isfile(file_path):
                            arcname = os.path.relpath(file_path, home)
                            tar.add(file_path, arcname=f"termux_backup/{arcname}")
                    except Exception as e:
                        logging.warning(f"Erreur ajout {file_path} : {str(e)}")
                    progress.update(task, advance=1)

        # 5. V√©rification finale
        if os.path.getsize(backup_file) < 10240:  # 10KB minimum
            raise ValueError("Archive trop petite - v√©rifiez les exclusions")

        # 6. Nettoyage auto et notification
        cleanup_backups()
        send_notification("Termux Backup", f"Sauvegarde r√©ussie ({len(files)} fichiers)")

        # Rapport final
        console.print(Panel(
            f"[bold green]‚úÖ SAUVEGARDE STANDARD R√âUSSIE[/bold green]\n"
            f"‚Ä¢ Fichiers : [cyan]{len(files)}[/cyan]\n"
            f"‚Ä¢ Taille : [yellow]{os.path.getsize(backup_file)/1024/1024:.1f} MB[/yellow]\n"
            f"‚Ä¢ Exclusions : [dim]{', '.join(EXCLUDE_PATTERNS[:3])}...[/dim]\n"
            f"‚Ä¢ Emplacement : [cyan]{backup_file}[/cyan]",
            border_style="green"
        ))

    except Exception as e:
        console.print(Panel(
            f"[bold red]‚ùå √âCHEC DE SAUVEGARDE[/bold red]\n"
            f"Erreur : {str(e)}\n\n"
            f"[yellow]CONSEILS :[/yellow]\n"
            f"1. V√©rifiez 'ls -la ~'\n"
            f"2. Espace disque libre : {shutil.disk_usage('/').free/(1024**3):.1f} GB\n"
            f"3. Testez : find ~ -type f | wc -l",
            border_style="red"
        ))
        if 'backup_file' in locals() and os.path.exists(backup_file):
            os.remove(backup_file)
        send_notification("Termux Backup", "√âchec de sauvegarde", success=False)

def list_user_files():
    """Liste les fichiers utilisateur pour debug"""
    home = os.path.expanduser("~")
    console.print(Panel(f"[bold]CONTENUT DU DOSSIER UTILISATEUR ({home}):[/bold]"))
    
    # Liste d√©taill√©e avec ls
    try:
        result = subprocess.run(f"ls -la {home}", shell=True, 
                              capture_output=True, text=True)
        console.print(result.stdout)
        
        # V√©rification des dossiers cl√©s
        for dir in [".termux", "scripts", "bin"]:
            path = os.path.join(home, dir)
            if os.path.exists(path):
                console.print(f"\n[bold]{dir}:[/bold]")
                console.print(subprocess.run(f"ls -la {path}", shell=True,
                                          capture_output=True, text=True).stdout)
    except Exception as e:
        console.print(f"[red]Erreur ls: {str(e)}[/red]")

def human_size(size):
    """Formatage lisible des tailles"""
    for unit in ['B', 'KB', 'MB', 'GB']:
        if size < 1024.0:
            return f"{size:.1f} {unit}"
        size /= 1024.0
    return f"{size:.1f} TB"

def verify_backup(backup_path):
    """V√©rifie structure et contenu de l'archive"""
    try:
        with tarfile.open(backup_path) as tar:
            members = tar.getmembers()
            if not members:
                raise ValueError("Archive vide")
            
            # V√©rifie la pr√©sence d'au moins un fichier de config
            config_files = [m for m in members if 'termux_configs' in m.path]
            if not config_files and 'cfg_' in backup_path:
                raise ValueError("Aucune configuration trouv√©e")
            
            # Test d'extraction d'un fichier
            test_file = next((m for m in members if m.isfile()), None)
            if test_file:
                tar.extractfile(test_file).read(16)  # Lit les premiers octets
        return True, "Archive valide"
    except Exception as e:
        return False, f"Erreur v√©rification : {str(e)}"

def estimate_backup_size(files):
    total = 0
    with Progress() as progress:
        task = progress.add_task("[cyan]Calcul de la taille...", total=len(files))
        
        for f in files:
            if os.path.islink(f):
                continue
                
            if os.path.isfile(f):
                total += os.path.getsize(f)
            elif os.path.isdir(f):
                for root, _, files in os.walk(f):
                    for file in files:
                        fp = os.path.join(root, file)
                        if not is_excluded(fp):
                            total += os.path.getsize(fp)
            progress.update(task, advance=1)
    
    size_mb = total / (1024 ** 2)
    console.print(f"\n[bold]Taille estim√©e :[/bold] {size_mb:.1f} MB")
    return size_mb
        
def convert_to_zip(tar_path, delete_original=False):
    """Convertit .tar.gz en .zip avec gestion des erreurs"""
    if not tar_path.endswith('.tar.gz'):
        raise ValueError("Format .tar.gz requis")
    
    zip_path = tar_path.replace('.tar.gz', '.zip')
    
    try:
        with tarfile.open(tar_path, 'r:gz') as tar:
            with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                for member in tar.getmembers():
                    if member.isfile() and not is_excluded(member.name):
                        try:
                            data = tar.extractfile(member).read()
                            zipf.writestr(member.name, data)
                        except Exception as e:
                            logging.warning(f"Erreur conversion {member.name}: {str(e)}")
        
        if delete_original and os.path.exists(zip_path):
            os.remove(tar_path)
            
        return zip_path
    except Exception as e:
        if os.path.exists(zip_path):
            os.remove(zip_path)
        raise e
        
def cleanup_backups(backup_dir, max_count=5, max_size_gb=2):
    """Nettoie les anciennes sauvegardes selon 2 crit√®res"""
    backups = sorted(
        glob.glob(f"{backup_dir}/*.tar.gz*") + glob.glob(f"{backup_dir}/*.zip*"),
        key=os.path.getmtime
    )
    
    # Crit√®re 1: Nombre maximum
    if len(backups) > max_count:
        for old in backups[:-(max_count)]:
            os.remove(old)
            logging.info(f"Supprim√© (max_count): {os.path.basename(old)}")
    
    # Crit√®re 2: Taille totale
    backups = sorted(
        glob.glob(f"{backup_dir}/*.tar.gz*") + glob.glob(f"{backup_dir}/*.zip*"),
        key=os.path.getmtime
    )
    total_size = sum(os.path.getsize(f) for f in backups) / (1024**3)
    
    while total_size > max_size_gb and len(backups) > 1:
        oldest = backups.pop(0)
        size_gb = os.path.getsize(oldest) / (1024**3)
        os.remove(oldest)
        total_size -= size_gb
        logging.info(f"Supprim√© (max_size): {os.path.basename(oldest)} ({size_gb:.2f} GB)")

EXCLUDE_PATTERNS = [
    '*.tmp', '*.log', '*cache*',
    '*.thumbnails*', '/Android/*',
    '/.cache/*', '/temp/*'
]

def should_exclude(path):
    """D√©termine si un fichier doit √™tre exclu"""
    path = os.path.normpath(path)
    return any(
        fnmatch.fnmatch(path, pattern) or 
        fnmatch.fnmatch(os.path.basename(path), pattern)
        for pattern in EXCLUDE_PATTERNS
    )
        
def restore_termux():
    """
    Restaure une sauvegarde compl√®te de Termux
    """
    backup_dir = os.path.expanduser("~/.termux_backups")
    
    if not os.path.exists(backup_dir):
        console.print("[red]‚ùå Aucun dossier de sauvegarde trouv√©[/red]")
        return
    
    backups = sorted(
        [f for f in os.listdir(backup_dir) if f.startswith("termux_backup_") and f.endswith(".tar.gz")],
        reverse=True
    )
    
    if not backups:
        console.print("[yellow]‚ö† Aucune sauvegarde disponible[/yellow]")
        return
    
    console.print(Panel.fit(
        "[bold cyan]üîÑ RESTAURATION DE TERMUX[/bold cyan]\n\n"
        "Cette op√©ration va :\n"
        "‚Ä¢ Extraire les fichiers utilisateur\n"
        "‚Ä¢ R√©installer les paquets (manuellement)\n"
        "‚Ä¢ Remplacer les fichiers existants",
        title="RESTAURATION", border_style="blue"
    ))
    
    # Affichage des sauvegardes disponibles
    console.print("[bold]Sauvegardes disponibles :[/bold]")
    for i, backup in enumerate(backups, 1):
        size = os.path.getsize(os.path.join(backup_dir, backup)) / (1024*1024)
        console.print(f"[cyan]{i}.[/cyan] {backup} ({size:.2f} MB)")
    
    console.print(f"\n[cyan]0.[/cyan] Annuler")
    
    # Choix de la sauvegarde
    choice = input(f"{yellow}Choisissez une sauvegarde √† restaurer (1-{len(backups)} ou 0) : {reset}").strip()
    if not choice.isdigit() or int(choice) < 0 or int(choice) > len(backups):
        console.print("[red]‚ùå Choix invalide[/red]")
        return
    if choice == "0":
        console.print("[blue]‚Ü© Restauration annul√©e[/blue]")
        return
    
    selected_backup = backups[int(choice)-1]
    backup_path = os.path.join(backup_dir, selected_backup)
    pkg_list = backup_path.replace(".tar.gz", "_pkg_list.txt")
    
    if not confirm_action(f"RESTAURER la sauvegarde {selected_backup} (cela √©crasera les fichiers existants)"):
        console.print("[red]‚ùå Restauration annul√©e[/red]")
        return
    
    # 1. Restauration des fichiers
    console.print("[cyan]‚Üí Extraction des fichiers utilisateur...[/cyan]")
    try:
        with tarfile.open(backup_path, "r:gz") as tar:
            tar.extractall(path=os.path.expanduser("~"))
        console.print("[green]‚úî Fichiers restaur√©s avec succ√®s[/green]")
    except Exception as e:
        console.print(f"[red]‚ùå Erreur lors de l'extraction : {str(e)}[/red]")
        return
    
    # 2. R√©installation des paquets (manuellement)
    if os.path.exists(pkg_list):
        console.print(Panel.fit(
            "[bold yellow]üì¶ PAQUETS √Ä REINSTALLER MANUELLEMENT[/bold yellow]\n\n"
            f"La liste des paquets est disponible dans :\n{pkg_list}\n"
            "Vous pouvez les r√©installer avec :\n"
            "`pkg install $(cat pkg_list.txt | awk '{print $1}')`",
            border_style="yellow"
        ))
    else:
        console.print("[yellow]‚ö† Liste des paquets introuvable - v√©rifiez {pkg_list}[/yellow]")
    
    console.print(Panel(
        "[bold green]‚úÖ RESTAURATION TERMIN√âE[/bold green]\n"
        "Il est recommand√© de red√©marrer Termux",
        border_style="green"
    ))
    
    input(f"\n{yellow}Appuyez sur Entr√©e pour continuer...{reset}")

def backup_configs_only():
    """Sauvegarde robuste des configurations syst√®me essentielles"""
    try:
        home = os.path.expanduser("~")
        backup_dir = os.path.join(home, ".termux_backups")
        os.makedirs(backup_dir, exist_ok=True)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_file = os.path.join(backup_dir, f"termux_cfg_{timestamp}.tar.gz")

        # 1. Liste exhaustive des configurations critiques
        CONFIG_PATHS = [
            ".termux", ".bashrc", ".zshrc", ".profile", ".vimrc",
            ".gitconfig", ".ssh", ".nanorc", ".tmux.conf",
            "../usr/etc/termux"
        ]

        # 2. V√©rification et validation des fichiers
        valid_configs = []
        for path in CONFIG_PATHS:
            full_path = os.path.join(home, path)
            
            if os.path.exists(full_path):
                if os.path.isdir(full_path):
                    # V√©rifie que le dossier n'est pas vide
                    if any(os.scandir(full_path)):
                        valid_configs.append(full_path)
                else:
                    # V√©rifie que le fichier a du contenu
                    if os.path.getsize(full_path) > 0:
                        valid_configs.append(full_path)

        if not valid_configs:
            raise ValueError("Aucune configuration valide trouv√©e")

        # 3. Cr√©ation de l'archive avec v√©rification en temps r√©el
        with tarfile.open(backup_file, "w:gz") as tar:
            for config_path in valid_configs:
                arcname = os.path.relpath(config_path, home)
                try:
                    tar.add(config_path, arcname=f"termux_configs/{arcname}")
                except Exception as e:
                    logging.warning(f"Erreur ajout {config_path} : {str(e)}")

        # 4. V√©rification d'int√©grit√© stricte
        is_valid, msg = verify_backup(backup_file)
        if not is_valid:
            raise ValueError(msg)

        # 5. Rapport et notification
        console.print(Panel(
            f"[bold green]‚úÖ SAUVEGARDE CONFIGS R√âUSSIE[/bold green]\n"
            f"‚Ä¢ Configurations : [cyan]{len(valid_configs)}[/cyan]\n"
            f"‚Ä¢ Taille : [yellow]{os.path.getsize(backup_file)/1024:.1f} KB[/yellow]\n"
            f"‚Ä¢ Contenu :\n[dim]{chr(10).join(os.path.basename(c) for c in valid_configs)}[/dim]",
            border_style="green"
        ))
        send_notification("Termux Configs", "Sauvegarde configs termin√©e")

    except Exception as e:
        console.print(Panel(
            f"[bold red]‚ùå √âCHEC SAUVEGARDE CONFIGS[/bold red]\n"
            f"Erreur : {str(e)}\n\n"
            f"[yellow]V√âRIFIEZ :[/yellow]\n"
            f"1. ~/.termux/ existe\n"
            f"2. ~/.bashrc a du contenu\n"
            f"3. Permissions en lecture",
            border_style="red"
        ))
        if 'backup_file' in locals() and os.path.exists(backup_file):
            os.remove(backup_file)
        send_notification("Termux Configs", "√âchec sauvegarde", success=False)
            
def incremental_backup():
    """Sauvegarde incr√©mentielle ultra-fiable des fichiers modifi√©s"""
    try:
        home = os.path.expanduser("~")
        backup_dir = os.path.join(home, ".termux_backups/incremental")
        os.makedirs(backup_dir, exist_ok=True)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_file = os.path.join(backup_dir, f"incr_{timestamp}.tar.gz")

        # 1. D√©terminer la date de la derni√®re sauvegarde
        last_backup = 0
        if os.path.exists(backup_dir):
            backups = [f for f in os.listdir(backup_dir) if f.startswith("incr_") and f.endswith(".tar.gz")]
            if backups:
                last_backup = os.path.getmtime(os.path.join(backup_dir, max(backups)))

        # 2. Liste des exclusions (dossiers syst√®me et cache)
        exclude_patterns = [
            '/.cache/*', '/.termux_backups/*', '/.local/*',
            '/../usr/*', '/tmp/*', '/.android/*', '/Android/*'
        ]

        # 3. Recherche des fichiers modifi√©s depuis la derni√®re sauvegarde
        console.print("[cyan]üîç Recherche des fichiers modifi√©s...[/cyan]")
        find_cmd = f"""
        find {home} -type f \
            ! -path '{home}/.cache/*' \
            ! -path '{home}/.termux_backups/*' \
            ! -path '{home}/.local/*' \
            ! -path '{home}/../usr/*' \
            ! -path '{home}/tmp/*' \
            ! -path '{home}/.android/*' \
            ! -path '{home}/Android/*' \
            -newermt '@{last_backup}' -print0
        """
        modified_files = subprocess.check_output(
            find_cmd, shell=True, executable='/bin/bash', text=True
        ).split('\0')[:-1]

        if not modified_files:
            console.print("[yellow]‚Ñπ Aucun fichier modifi√© depuis la derni√®re sauvegarde[/yellow]")
            return

        # 4. Cr√©ation de l'archive incr√©mentielle
        console.print(f"[cyan]üì¶ Cr√©ation de l'archive ({len(modified_files)} fichiers modifi√©s)...[/cyan]")
        
        # Fichier index pour le suivi
        index_file = os.path.join(backup_dir, f"incr_{timestamp}.index")
        with open(index_file, 'w') as f:
            f.write("\n".join(modified_files))

        with tarfile.open(backup_file, "w:gz") as tar:
            # Ajout des fichiers modifi√©s
            for file_path in modified_files:
                if os.path.exists(file_path):  # Double v√©rification
                    arcname = os.path.relpath(file_path, home)
                    tar.add(file_path, arcname=arcname)
            
            # Ajout du fichier index
            tar.add(index_file, arcname="backup.index")
        
        os.remove(index_file)  # Nettoyage

        # 5. V√©rification finale
        archive_size = os.path.getsize(backup_file) / (1024 * 1024)  # en MB
        if archive_size < 0.01:  # Au moins 10KB
            raise ValueError(f"Archive trop petite ({archive_size:.2f} MB)")

        # Rapport complet
        console.print(Panel(
            f"[bold green]‚úÖ SAUVEGARDE INCR√âMENTIELLE R√âUSSIE[/bold green]\n"
            f"‚Ä¢ Fichiers : {len(modified_files)}\n"
            f"‚Ä¢ Taille : {archive_size:.2f} MB\n"
            f"‚Ä¢ P√©riode : depuis {datetime.fromtimestamp(last_backup).strftime('%d/%m/%Y %H:%M') if last_backup else 'jamais'}\n"
            f"‚Ä¢ Exclusions : {' '.join(exclude_patterns)}\n"
            f"‚Ä¢ Emplacement : [cyan]{backup_file}[/cyan]",
            border_style="green"
        ))

        # 6. Nettoyage des anciennes sauvegardes (garder les 5 derni√®res)
        backups = sorted(
            [os.path.join(backup_dir, f) for f in os.listdir(backup_dir) 
             if f.startswith("incr_") and f.endswith(".tar.gz")],
            key=os.path.getmtime
        )
        for old_backup in backups[:-5]:  # Garder seulement les 5 plus r√©centes
            os.remove(old_backup)
            console.print(f"[dim]üóë Nettoyage : {os.path.basename(old_backup)}[/dim]")

    except subprocess.CalledProcessError as e:
        console.print(Panel(
            f"[bold red]‚ùå ERREUR DE RECHERCHE[/bold red]\n"
            f"Commande : {e.cmd}\n"
            f"Sortie : {e.stderr if e.stderr else 'Aucun message'}",
            border_style="red"
        ))
    except Exception as e:
        console.print(Panel(
            f"[bold red]‚ùå ERREUR DE SAUVEGARDE[/bold red]\n"
            f"Type : {type(e).__name__}\n"
            f"Message : {str(e)}\n\n"
            f"[yellow]DIAGNOSTIC :[/yellow]\n"
            f"1. V√©rifiez l'espace disque\n"
            f"2. Testez la commande :\n"
            f"   find ~ -type f -newermt '2024-05-20' | wc -l\n"
            f"3. V√©rifiez les permissions",
            border_style="red"
        ))
        # Nettoyage en cas d'√©chec
        if 'backup_file' in locals() and os.path.exists(backup_file):
            os.remove(backup_file)
        if 'index_file' in locals() and os.path.exists(index_file):
            os.remove(index_file)

def backup_to_external():
    """Sauvegarde vers le stockage externe - Version am√©lior√©e"""
    try:
        console.print(Panel.fit(
            "[bold cyan]üì§ SAUVEGARDE VERS STOCKAGE EXTERNE[/bold cyan]\n\n"
            "Cette op√©ration va :\n"
            "- Copier les fichiers essentiels vers le stockage externe\n"
            "- Cr√©er une archive compress√©e\n"
            "- V√©rifier l'int√©grit√© de la sauvegarde",
            border_style="blue"
        ))

        # 1. V√©rification du stockage externe
        storage_path = os.path.expanduser("~/storage/shared")
        if not os.path.exists(storage_path):
            console.print(Panel(
                "[red]‚ùå STOCKAGE NON CONFIGUR√â[/red]\n\n"
                "Ex√©cutez d'abord :\n"
                "[bold green]termux-setup-storage[/bold green]\n"
                "Et autorisez l'acc√®s au stockage",
                border_style="red"
            ))
            if Confirm.ask("[yellow]Configurer maintenant ?[/yellow]"):
                subprocess.run("termux-setup-storage", shell=True, check=True)
                console.print("[green]‚úî Red√©marrez le script apr√®s configuration[/green]")
            return

        # 2. Cr√©ation du dossier de sauvegarde
        backup_dir = os.path.join(storage_path, "Termux_Backups")
        os.makedirs(backup_dir, exist_ok=True)
        
        # 3. Liste des √©l√©ments essentiels √† sauvegarder (avec v√©rification)
        essential_items = [
            # Fichiers de configuration
            ("~/.termux", "dossier de configuration Termux"),
            ("~/.bashrc", "configuration Bash"),
            ("~/.zshrc", "configuration Zsh"),
            ("~/.profile", "profile shell"),
            ("~/.vimrc", "configuration Vim"),
            
            # Dossiers importants
            ("~/.ssh", "cl√©s SSH"),
            ("~/bin", "scripts utilisateur"),
            ("~/scripts", "scripts personnels"),
            
            # Fichiers Termux syst√®me
            ("~/../usr/etc/termux", "configuration syst√®me Termux")
        ]

        # Filtrage des √©l√©ments existants
        valid_items = []
        for path, desc in essential_items:
            expanded = os.path.expanduser(path)
            if os.path.exists(expanded):
                size = get_folder_size(expanded) if os.path.isdir(expanded) else os.path.getsize(expanded)
                valid_items.append((expanded, os.path.basename(expanded), size, desc))
                console.print(f"[green]‚úì {path.ljust(15)} ({human_size(size)}) - {desc}[/green]")
            else:
                console.print(f"[yellow]‚úó {path.ljust(15)} (absent) - {desc}[/yellow]")

        if not valid_items:
            console.print(Panel(
                "[red]‚ùå AUCUN √âL√âMENT VALIDE √Ä SAUVEGARDER[/red]\n"
                "V√©rifiez que vous avez des fichiers de configuration",
                border_style="red"
            ))
            return

        # 4. Cr√©ation de l'archive
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_file = os.path.join(backup_dir, f"termux_ext_{timestamp}.tar.gz")
        
        console.print(Panel.fit(
            f"[cyan]üì¶ CR√âATION DE L'ARCHIVE ({len(valid_items)} √©l√©ments)[/cyan]\n"
            f"Destination : [bold]{backup_file}[/bold]",
            border_style="cyan"
        ))

        try:
            with tarfile.open(backup_file, "w:gz") as tar:
                for full_path, arcname, _, _ in valid_items:
                    tar.add(full_path, arcname=arcname)
                    console.print(f"[dim]‚Üí Ajout√© : {arcname}[/dim]")

            # V√©rification de la taille minimale
            if os.path.getsize(backup_file) < 1024:  # 1KB minimum
                raise ValueError("Archive trop petite - v√©rifiez les fichiers sources")

            # V√©rification d'int√©grit√©
            with tarfile.open(backup_file) as test:
                if not test.getnames():
                    raise ValueError("Archive vide")

            console.print(Panel(
                f"[bold green]‚úÖ SAUVEGARDE EXTERNE R√âUSSIE[/bold green]\n\n"
                f"‚Ä¢ Fichier : [cyan]{os.path.basename(backup_file)}[/cyan]\n"
                f"‚Ä¢ Taille : [yellow]{human_size(os.path.getsize(backup_file))}[/yellow]\n"
                f"‚Ä¢ Emplacement : [cyan]{backup_file}[/cyan]",
                border_style="green"
            ))

            # Notification Android
            send_notification(
                "Termux Backup", 
                f"Sauvegarde externe r√©ussie ({len(valid_items)} √©l√©ments)"
            )

        except Exception as e:
            console.print(Panel(
                f"[bold red]‚ùå √âCHEC DE CR√âATION DE L'ARCHIVE[/bold red]\n"
                f"Erreur : {str(e)}",
                border_style="red"
            ))
            if os.path.exists(backup_file):
                os.remove(backup_file)
            send_notification("Termux Backup", "√âchec sauvegarde externe", success=False)

    except PermissionError:
        console.print(Panel(
            "[red]‚ùå PERMISSION REFUS√âE[/red]\n\n"
            "Autorisations n√©cessaires :\n"
            "1. Acc√®s au stockage externe\n"
            "2. Ex√©cutez 'termux-setup-storage'",
            border_style="red"
        ))
    except Exception as e:
        console.print(Panel(
            f"[red]‚ùå ERREUR INATTENDUE[/red]\n"
            f"Type : {type(e).__name__}\n"
            f"Message : {str(e)}",
            border_style="red"
        ))

    input("\nAppuyez sur Entr√©e pour continuer...")

def get_free_space(path):
    """Retourne l'espace disque disponible en GB"""
    try:
        stat = os.statvfs(path)
        return (stat.f_bavail * stat.f_frsize) / (1024**3)
    except:
        return 0

def manage_backups():
    """Menu de gestion des sauvegardes"""
    while True:
        console.print(Panel(
            "[bold cyan]üóÇ GESTION DES SAUVEGARDES[/bold cyan]\n\n"
            "Choisissez une action :\n"
            "[1] Lister les sauvegardes\n"
            "[2] Supprimer des sauvegardes\n"
            "[3] V√©rifier l'int√©grit√© d'une sauvegarde\n"
            "[4] Retour au menu principal",
            border_style="blue"
        ))

        choice = get_choice(1, 4)

        if choice == 1:
            list_backups()
        elif choice == 2:
            delete_backups()
        elif choice == 3:
            verify_existing_backup()
        elif choice == 4:
            break

        input(f"\n{yellow}Appuyez sur Entr√©e pour continuer...{reset}")

def list_backups():
    """Liste toutes les sauvegardes disponibles"""
    backup_locations = [
        os.path.expanduser("~/.termux_backups"),
        os.path.expanduser("~/storage/shared/Termux_Backups")
    ]

    console.print(Panel(
        "[bold cyan]üìÇ SAUVEGARDES DISPONIBLES[/bold cyan]",
        border_style="blue"
    ))

    found = False
    for location in backup_locations:
        if os.path.exists(location):
            backups = sorted(
                [f for f in os.listdir(location) if f.startswith(("termux_backup_", "termux_ext_", "termux_config_"))],
                reverse=True
            )
            
            if backups:
                found = True
                console.print(f"\n[bold]Emplacement : {location}[/bold]")
                for i, backup in enumerate(backups, 1):
                    size = os.path.getsize(os.path.join(location, backup)) / (1024*1024)
                    console.print(f"[cyan]{i}.[/cyan] {backup} ({size:.2f} MB)")

    if not found:
        console.print("[yellow]‚Ñπ Aucune sauvegarde trouv√©e[/yellow]")

def delete_backups():
    """Supprime des sauvegardes existantes"""
    backup_locations = [
        os.path.expanduser("~/.termux_backups"),
        os.path.expanduser("~/storage/shared/Termux_Backups")
    ]

    all_backups = []
    for location in backup_locations:
        if os.path.exists(location):
            backups = sorted(
                [os.path.join(location, f) for f in os.listdir(location) 
                 if f.startswith(("termux_backup_", "termux_ext_", "termux_config_"))],
                reverse=True
            )
            all_backups.extend(backups)

    if not all_backups:
        console.print("[yellow]‚Ñπ Aucune sauvegarde √† supprimer[/yellow]")
        return

    console.print(Panel(
        "[bold red]üóë SUPPRESSION DE SAUVEGARDES[/bold red]\n\n"
        "S√©lectionnez les sauvegardes √† supprimer :",
        border_style="red"
    ))

    for i, backup in enumerate(all_backups, 1):
        size = os.path.getsize(backup) / (1024*1024)
        console.print(f"[cyan]{i}.[/cyan] {os.path.basename(backup)} ({size:.2f} MB) - {os.path.dirname(backup)}")

    console.print(f"\n[cyan]0.[/cyan] Annuler")
    console.print(f"[cyan]T.[/cyan] Tout supprimer")

    choices = input(f"{yellow}Choix (num√©ros s√©par√©s par des virgules, 0 ou T) : {reset}").strip().upper()

    if choices == "0":
        console.print("[blue]‚Ü© Annul√©[/blue]")
        return
    elif choices == "T":
        if confirm_action("SUPPRIMER TOUTES LES SAUVEGARDES (action irr√©versible)"):
            deleted = 0
            for backup in all_backups:
                try:
                    os.remove(backup)
                    deleted += 1
                    console.print(f"[green]‚úî Supprim√© : {os.path.basename(backup)}[/green]")
                except Exception as e:
                    console.print(f"[red]‚ùå Erreur : {os.path.basename(backup)} - {str(e)}[/red]")
            
            console.print(Panel(
                f"[bold green]‚úÖ {deleted} SAUVEGARDES SUPPRIM√âES[/bold green]",
                border_style="green"
            ))
    else:
        try:
            indexes = [int(i.strip()) - 1 for i in choices.split(",")]
            to_delete = [all_backups[i] for i in indexes if 0 <= i < len(all_backups)]
            
            if not to_delete:
                console.print("[red]‚ùå Aucune sauvegarde valide s√©lectionn√©e[/red]")
                return
            
            console.print(Panel(
                "[bold red]‚ö† SAUVEGARDES S√âLECTIONN√âES :[/bold red]\n" +
                "\n".join([os.path.basename(b) for b in to_delete]),
                border_style="red"
            ))
            
            if confirm_action(f"Supprimer {len(to_delete)} sauvegarde(s)"):
                deleted = 0
                for backup in to_delete:
                    try:
                        os.remove(backup)
                        deleted += 1
                        console.print(f"[green]‚úî Supprim√© : {os.path.basename(backup)}[/green]")
                    except Exception as e:
                        console.print(f"[red]‚ùå Erreur : {os.path.basename(backup)} - {str(e)}[/red]")
                
                console.print(Panel(
                    f"[bold green]‚úÖ {deleted}/{len(to_delete)} SAUVEGARDES SUPPRIM√âES[/bold green]",
                    border_style="green"
                ))
        except ValueError:
            console.print("[red]‚ùå S√©lection invalide[/red]")

def verify_existing_backup():
    """V√©rifie l'int√©grit√© d'une sauvegarde existante"""
    backup_locations = [
        os.path.expanduser("~/.termux_backups"),
        os.path.expanduser("~/storage/shared/Termux_Backups")
    ]

    all_backups = []
    for location in backup_locations:
        if os.path.exists(location):
            backups = sorted(
                [os.path.join(location, f) for f in os.listdir(location) 
                 if f.endswith(".tar.gz")],
                reverse=True
            )
            all_backups.extend(backups)

    if not all_backups:
        console.print("[yellow]‚Ñπ Aucune sauvegarde √† v√©rifier[/yellow]")
        return

    console.print(Panel(
        "[bold cyan]üîç V√âRIFICATION DE SAUVEGARDE[/bold cyan]",
        border_style="blue"
    ))

    for i, backup in enumerate(all_backups, 1):
        size = os.path.getsize(backup) / (1024*1024)
        console.print(f"[cyan]{i}.[/cyan] {os.path.basename(backup)} ({size:.2f} MB) - {os.path.dirname(backup)}")

    console.print(f"\n[cyan]0.[/cyan] Annuler")

    choice = input(f"{yellow}Choisissez une sauvegarde √† v√©rifier : {reset}").strip()
    if choice == "0":
        return

    try:
        selected = all_backups[int(choice)-1]
        is_valid, msg = verify_backup(selected)
        
        if is_valid:
            console.print(Panel(
                f"[bold green]‚úÖ SAUVEGARDE VALIDE[/bold green]\n\n"
                f"‚Ä¢ Fichier : {os.path.basename(selected)}\n"
                f"‚Ä¢ Emplacement : {os.path.dirname(selected)}\n"
                f"‚Ä¢ R√©sultat : {msg}",
                border_style="green"
            ))
        else:
            console.print(Panel(
                f"[bold red]‚ùå SAUVEGARDE CORROMPUE[/bold red]\n\n"
                f"‚Ä¢ Fichier : {os.path.basename(selected)}\n"
                f"‚Ä¢ Probl√®me : {msg}",
                border_style="red"
            ))
    except Exception as e:
        console.print(f"[red]‚ùå Erreur : {str(e)}[/red]")

# ========== Nouvelles fonctions de restauration ==========

def restore_configs_only():
    """Restaure seulement les fichiers de configuration"""
    backup_dir = os.path.expanduser("~/.termux_backups")
    backups = sorted(
        [f for f in os.listdir(backup_dir) if f.startswith("termux_configs_")],
        reverse=True
    )
    
    if not backups:
        console.print("[yellow]‚ö† Aucune sauvegarde de configurations trouv√©e[/yellow]")
        return
    
    console.print(Panel.fit(
        "[bold cyan]üîÑ RESTAURATION DES CONFIGURATIONS[/bold cyan]\n\n"
        "Seuls les fichiers de configuration seront restaur√©s\n"
        "Les fichiers existants seront √©cras√©s",
        title="RESTAURATION CONFIGS", border_style="blue"
    ))
    
    # Afficher les sauvegardes disponibles
    for i, backup in enumerate(backups, 1):
        console.print(f"[cyan]{i}.[/cyan] {backup}")
    console.print(f"\n[cyan]0.[/cyan] Annuler")
    
    choice = input(f"{yellow}Choisissez une sauvegarde √† restaurer (1-{len(backups)}) : {reset}").strip()
    if choice == "0":
        return
    
    backup_path = os.path.join(backup_dir, backups[int(choice)-1])
    
    if not confirm_action(f"RESTAURER les configurations depuis {backup_path}"):
        return
    
    try:
        with tarfile.open(backup_path, "r:gz") as tar:
            tar.extractall(path=os.path.expanduser("~"))
        
        console.print(Panel(
            "[bold green]‚úÖ CONFIGURATIONS RESTAUR√âES[/bold green]\n"
            "Red√©marrez Termux pour appliquer les changements",
            border_style="green"
        ))
    except Exception as e:
        console.print(f"[red]‚ùå Erreur : {str(e)}[/red]")
    
    input(f"\n{yellow}Appuyez sur Entr√©e pour continuer...{reset}")

def restore_from_external():
    """Restauration depuis stockage externe - Version s√©curis√©e"""
    try:
        # Chemin standard Termux pour le stockage externe
        storage_path = os.path.expanduser("~/storage/shared")
        
        if not os.path.exists(storage_path):
            console.print(Panel(
                "[red]‚ùå STOCKAGE NON CONFIGUR√â[/red]\n\n"
                "Ex√©cutez d'abord :\n"
                "[bold green]termux-setup-storage[/bold green]\n"
                "Et accordez les permissions",
                border_style="red"
            ))
            if Confirm.ask("[yellow]Essayer de configurer maintenant ?[/yellow]"):
                subprocess.run("termux-setup-storage", shell=True, check=True)
                console.print("[green]‚úî Red√©marrez le script apr√®s configuration[/green]")
            return

        # Recherche des sauvegardes
        backup_files = []
        for root, _, files in os.walk(storage_path):
            for file in files:
                if file.startswith(("termux_backup_", "termux_ext_")) and file.endswith(".tar.gz"):
                    backup_files.append(os.path.join(root, file))

        if not backup_files:
            console.print(Panel(
                "[red]‚ùå AUCUNE SAUVEGARDE TROUV√âE[/red]\n\n"
                "Placez votre sauvegarde dans :\n"
                f"[cyan]{storage_path}[/cyan]\n"
                "avec un nom commen√ßant par 'termux_backup_' ou 'termux_ext_'",
                border_style="red"
            ))
            return

        # Affichage des sauvegardes disponibles
        console.print(Panel("[bold]SAUVEGARDES DISPONIBLES :[/bold]", border_style="green"))
        for i, backup in enumerate(sorted(backup_files, reverse=True), 1):
            size = os.path.getsize(backup)/(1024*1024)
            console.print(f"[cyan]{i}.[/cyan] {os.path.basename(backup)} ({size:.2f} MB)")

        # S√©lection
        choice = int(input(f"\n{yellow}Choisissez une sauvegarde (1-{len(backup_files)}) : {reset}"))
        if choice < 1 or choice > len(backup_files):
            raise ValueError

        backup_path = backup_files[choice-1]

        # Confirmation
        console.print(Panel(
            f"[bold red]‚ö† ATTENTION ![/bold red]\n\n"
            f"Vous allez restaurer :\n[cyan]{os.path.basename(backup_path)}[/cyan]\n"
            "Cette op√©ration √©crasera vos fichiers existants !",
            border_style="red"
        ))

        if not Confirm.ask("[bold red]Confirmer la restauration ?[/bold red]"):
            return

        # Commande de restauration s√©curis√©e
        cmd = f"tar -xzvf '{backup_path}' -C /data/data/com.termux/files/ --warning=no-timestamp"
        with Progress() as progress:
            task = progress.add_task("[red]Restauration en cours...[/red]", total=None)
            subprocess.run(cmd, shell=True, check=True)

        console.print(Panel(
            "[bold green]‚úÖ RESTAURATION R√âUSSIE[/bold green]\n\n"
            "[yellow]Red√©marrez Termux pour appliquer les changements[/yellow]",
            border_style="green"
        ))

    except PermissionError:
        console.print(Panel(
            "[bold red]‚ùå PERMISSION REFUS√âE[/bold red]\n\n"
            "Termux n'a pas acc√®s au stockage.\n"
            "1. Ex√©cutez [green]termux-setup-storage[/green]\n"
            "2. Accordez les permissions\n"
            "3. R√©essayez",
            border_style="red"
        ))
    except Exception as e:
        console.print(f"[red]‚ùå Erreur : {str(e)}[/red]")

    input("\nAppuyez sur Entr√©e pour continuer...")

def backup_termux_advanced():
    """Nouvelle m√©thode principale intelligente"""
    console.print(Panel.fit(
        "[bold cyan]üîç D√âTECTION AUTOMATIQUE DE LA MEILLEURE M√âTHODE[/bold cyan]",
        border_style="blue"
    ))

    # 1. V√©rification de rsync
    if shutil.which("rsync"):
        console.print("[green]‚úì M√©thode rsync disponible[/green]")
        try:
            return backup_termux_alternative_rsync()
        except Exception as e:
            console.print(f"[yellow]‚ö† √âchec rsync : {str(e)}[/yellow]")
            console.print("[yellow]‚Ü™ Tentative avec m√©thode standard...[/yellow]")
    
    # 2. Fallback sur tar avec exclusions renforc√©es
    console.print("[yellow]‚Ñπ Utilisation de la m√©thode standard avec exclusions[/yellow]")
    return backup_termux_alternative_safe()

def backup_termux_alternative():
    """Sauvegarde fiable avec d√©tection automatique du chemin Termux"""
    from rich.progress import (
        Progress, BarColumn, TextColumn, 
        TimeRemainingColumn, TaskProgressColumn
    )
    
    # 1. D√©tection automatique du chemin Termux
    termux_paths = [
        os.path.expanduser("$PREFIX/../.."),  # Chemin standard
        "/data/data/com.termux/files",         # Chemin alternatif
        os.path.expanduser("~/../..")          # Chemin racine
    ]
    
    source_dir = None
    for path in termux_paths:
        test_path = os.path.join(path, "files")
        if os.path.exists(test_path):
            source_dir = test_path
            break
    
    if not source_dir:
        console.print(Panel(
            "[red]‚ùå DOSSIER TERMUX INTROUVABLE[/red]\n\n"
            "Impossible de localiser l'installation Termux.\n"
            "Essayez de sp√©cifier manuellement le chemin avec :\n"
            "[cyan]tar -czf /sdcard/backup_manual.tar.gz /data/data/com.termux/files[/cyan]",
            border_style="red"
        ))
        input("\nAppuyez sur Entr√©e pour continuer...")
        return

    # 2. Configuration de la sauvegarde
    backup_dir = "/sdcard/Termux_Backups"
    os.makedirs(backup_dir, exist_ok=True)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_path = os.path.join(backup_dir, f"termux_full_{timestamp}.tar.gz")

    console.print(Panel.fit(
        f"[bold cyan]üíæ SAUVEGARDE COMPL√àTE DE TERMUX[/bold cyan]\n"
        f"Source : [yellow]{source_dir}[/yellow]",
        border_style="blue"
    ))

    if not Confirm.ask("  Confirmer la cr√©ation de la sauvegarde ?", default=False):
        return

    try:
        # 3. V√©rification de l'espace
        console.print("[dim]Calcul de l'espace n√©cessaire...[/dim]")
        size_cmd = f"du -sb {source_dir} | cut -f1"
        termux_size = int(subprocess.check_output(size_cmd, shell=True, text=True).strip())
        
        free_space = shutil.disk_usage("/sdcard").free
        if termux_size * 2 > free_space:
            raise ValueError(
                f"Espace insuffisant\n"
                f"N√©cessaire : {termux_size*2/1024/1024:.1f} MB\n"
                f"Disponible : {free_space/1024/1024:.1f} MB"
            )

        # 4. Sauvegarde avec feedback visuel
        with Progress(
            TextColumn("[progress.description]{task.description}"),
            BarColumn(bar_width=30),
            TaskProgressColumn(),
            TextColumn("‚Ä¢"),
            TimeRemainingColumn(),
            transient=True
        ) as progress:
            task = progress.add_task("[cyan]Sauvegarde en cours...", total=termux_size)
            
            cmd = f"tar -czf {backup_path} -C {os.path.dirname(source_dir)} {os.path.basename(source_dir)}"
            proc = subprocess.Popen(
                cmd,
                shell=True,
                stderr=subprocess.PIPE,
                stdout=subprocess.DEVNULL,
                text=True
            )
            
            # Mise √† jour de la progression
            while proc.poll() is None:
                if os.path.exists(backup_path):
                    progress.update(task, completed=os.path.getsize(backup_path))
                time.sleep(0.5)
            
            if proc.returncode != 0:
                raise subprocess.CalledProcessError(proc.returncode, cmd, proc.stderr.read())

        # 5. Validation finale
        if os.path.getsize(backup_path) < 100000000:  # 100MB minimum
            raise ValueError(f"Archive trop petite ({os.path.getsize(backup_path)/1024/1024:.1f} MB)")
        
        console.print(Panel(
            f"[bold green]‚úÖ SAUVEGARDE R√âUSSIE[/bold green]\n"
            f"‚Ä¢ Taille : [cyan]{os.path.getsize(backup_path)/1024/1024:.1f} MB[/cyan]\n"
            f"‚Ä¢ Emplacement : [cyan]{backup_path}[/cyan]",
            border_style="green"
        ))
        
    except Exception as e:
        console.print(Panel(
            f"[bold red]‚ùå √âCHEC DE SAUVEGARDE[/bold red]\n"
            f"Erreur : {str(e)}",
            border_style="red"
        ))
        if os.path.exists(backup_path):
            os.remove(backup_path)
            
    finally:
        input("\nAppuyez sur Entr√©e pour continuer...")
        
# ==============================================
# 7. V√©rification des permissions
# ==============================================
def check_permissions():
    """V√©rifie si le script a les permissions n√©cessaires"""
    if not os.access("/data/data/com.termux/files/usr", os.W_OK):
        console.print("[red]‚ùå Erreur: Permissions insuffisantes[/red]")
        console.print("[yellow]‚áí Essayez de lancer avec 'sudo' si n√©cessaire[/yellow]")
        return False
    return True

# ==============================================
# 8. Confirmations am√©lior√©es
# ==============================================
def confirm_action(action_name):
    messages = {
        "Nettoyer les d√©pendances globales": (
            "üßº Nettoyage des d√©pendances globales\n\n"
            "‚Ä¢ Supprime le cache de Go (`go clean -modcache`)\n"
            "‚Ä¢ D√©sinstalle tous les modules Python install√©s globalement (`pip freeze | xargs pip uninstall -y`)\n"
            "‚Üí Cela permet de repartir sur un environnement propre si des conflits ou doublons apparaissent."
        ),
        "Quitter le programme": (
            "üö™ Quitter Super Cleaner\n\n"
            "‚Ä¢ Ferme le programme imm√©diatement\n"
            "‚Ä¢ Aucune op√©ration ne sera effectu√©e\n"
            "‚Üí Vous pourrez le relancer plus tard sans perte."
        ),
        "R√âINITIALISATION COMPL√àTE du syst√®me (Cette action est irr√©versible)": (
            "üí£ R√©initialisation compl√®te du syst√®me\n\n"
            "‚Ä¢ Supprime tous les outils, modules, fichiers utilisateurs et paquets non essentiels\n"
            "‚Ä¢ R√©initialise Termux √† un √©tat de base\n"
            "‚Üí Action IRR√âVERSIBLE, utilisez en dernier recours !"
        )
    }

    description = messages.get(action_name, "Cette action peut modifier votre environnement.")
    console.print(Panel.fit(description, title=f"[bold red]CONFIRMATION REQUISE[/bold red]", border_style="red"))

    confirm = input(f"{yellow}‚ö† Confirmer: {action_name} ? [y/n] : {reset}").strip().lower()
    return confirm in ["y", "yes", "o", "oui"]
    
def confirm_task(action_name):
    messages = {
        "Nettoyage l√©ger": (
            "üßΩ Nettoyage l√©ger\n\n"
            "‚Ä¢ Supprime les modules Python non essentiels\n"
            "‚Ä¢ Purge le cache pip\n"
            "‚Üí Id√©al pour un nettoyage rapide sans risque"
        ),
        "Nettoyage standard": (
            "üßπ Nettoyage standard\n\n"
            "‚Ä¢ Inclut le nettoyage l√©ger\n"
            "‚Ä¢ Supprime Subfinder, Go et d'autres outils\n"
            "‚Üí Recommand√© apr√®s usage d'outils de pentest"
        ),
        "Nettoyage approfondi": (
            "üåÄ Nettoyage approfondi\n\n"
            "‚Ä¢ Supprime fichiers temporaires, logs, caches\n"
            "‚Ä¢ Vide ~/.cache, ~/tmp et fichiers *.log\n"
            "‚Üí Appropri√© pour lib√©rer de l‚Äôespace"
        ),
        "Nettoyage COMPLET": (
            "üí• Nettoyage COMPLET (irr√©versible)\n\n"
            "‚Ä¢ Termine les processus en cours\n"
            "‚Ä¢ Supprime presque tous les paquets et configs\n"
            "‚Ä¢ R√©initialise totalement l‚Äôenvironnement\n"
            "‚Üí Dernier recours, n√©cessite r√©installation Termux"
        )
    }

    description = messages.get(action_name, "Aucune description disponible.")
    console.print(Panel.fit(description, title=f"[bold red]CONFIRMATION[/bold red]", border_style="red"))

    confirm = input(f"{yellow}‚ö† Voulez-vous continuer avec : {action_name} ? [y/n] : {reset}").strip().lower()
    return confirm in ['y', 'yes', 'o', 'oui']
    
# ==============================================
# 9. Mode Dry Run
# ==============================================
def dry_run():
    """Simule les actions sans rien modifier"""
    console.print(Panel(
        "[bold yellow]üêâ MODE DRY RUN (simulation)[/bold yellow]\n"
        "Aucune modification ne sera effectu√©e",
        border_style="yellow"
    ))
    
    # Simulation nettoyage Python
    result = subprocess.run("pip list --format=freeze", shell=True, capture_output=True, text=True)
    modules = result.stdout.splitlines()
    console.print(f"[cyan]‚Üí {len(modules)} modules Python seraient d√©sinstall√©s[/cyan]")
    
    # Simulation suppression outils
    detected_tools = []
    for tool, paths in RECON_TOOLS.items():
        for path in paths:
            if os.path.exists(os.path.expanduser(path)):
                detected_tools.append(tool)
                break
                
    if detected_tools:
        console.print("[cyan]‚Üí Outils d√©tect√©s qui seraient supprim√©s:[/cyan]")
        for tool in detected_tools:
            console.print(f"  ‚Ä¢ {tool}")
    else:
        console.print("[green]‚Üí Aucun outil suppl√©mentaire d√©tect√©[/green]")

def get_size(path):
    """Retourne la taille totale d‚Äôun fichier ou dossier (en octets)."""
    total = 0
    path = os.path.expanduser(path)
    if os.path.isfile(path):
        total += os.path.getsize(path)
    elif os.path.isdir(path):
        for dirpath, _, filenames in os.walk(path):
            for f in filenames:
                fp = os.path.join(dirpath, f)
                if os.path.exists(fp):
                    total += os.path.getsize(fp)
    return total
    
def dry_run_tool_cleanup():
    """Simule la suppression des outils de reconnaissance et affiche les tailles."""
    total_size = 0
    console.print(Panel("üêâ MODE DRY RUN (simulation)\nAucune modification ne sera effectu√©e", border_style="cyan"))

    tools_found = []

    for tool, paths in RECON_TOOLS.items():
        for path in paths:
            full = os.path.expanduser(path)
            if os.path.exists(full):
                size = get_size(full)
                total_size += size
                tools_found.append((tool, full, size))

    if not tools_found:
        console.print("[yellow]Aucun outil d√©tect√© pour suppression.[/yellow]")
    else:
        for tool, path, size in tools_found:
            console.print(f"[blue]‚Üí {tool}[/blue] ({path}) ‚Äî [magenta]{size / 1024:.2f} KB[/magenta]")

        console.print(f"\n[bold green]üíæ Gain estim√© : {total_size / (1024*1024):.2f} Mo[/bold green]")

    input(f"\n{yellow}Appuyez sur Entr√©e pour revenir...{reset}")
# ==============================================
# Journalisation (Logging)
# ==============================================
def setup_logging():
    """Configure le syst√®me de logging"""
    log_file = os.path.expanduser("~/supercleaner.log")
    logging.basicConfig(
        filename=log_file,
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S"
    )

def log_action(action, details):
    """Journalise une action"""
    logging.info(f"{action}: {details}")
    console.print(f"[dim cyan]üìù Journal: {action} ‚Üí {details}[/dim cyan]")

# ==============================================
# Fonctions principales modifi√©es
# ==============================================
def manage_installed_modules_and_tools():
    """Liste et d√©sinstalle les modules Python et les outils de reconnaissance."""
    from rich.table import Table

    # R√©cup√©ration des modules Python
    result = subprocess.run("pip list --format=columns", shell=True, capture_output=True, text=True)
    python_lines = result.stdout.splitlines()[2:]
    python_modules = [line.split()[0] for line in python_lines]

    # Liste des outils avec leurs chemins
    recon_tools = {
        "Subfinder": ["~/.config/subfinder", "/data/data/com.termux/files/usr/bin/subfinder"],
        "Sublist3r": ["~/Sublist3r", "/data/data/com.termux/files/usr/bin/sublist3r"],
        "Amass": ["~/.config/amass", "/data/data/com.termux/files/usr/bin/amass"],
        "Assetfinder": ["/data/data/com.termux/files/usr/bin/assetfinder"],
        "Findomain": ["/data/data/com.termux/files/usr/bin/findomain"],
        "Waybackurls": ["/data/data/com.termux/files/usr/bin/waybackurls"],
        "Gau": ["/data/data/com.termux/files/usr/bin/gau"],
        "Httprobe": ["/data/data/com.termux/files/usr/bin/httprobe"],
        "Naabu": ["/data/data/com.termux/files/usr/bin/naabu"],
        "Nuclei": ["/data/data/com.termux/files/usr/bin/nuclei"],
        "Katana": ["/data/data/com.termux/files/usr/bin/katana"],
        "Dnsx": ["/data/data/com.termux/files/usr/bin/dnsx"],
        "HTTPx": ["/data/data/com.termux/files/usr/bin/httpx"]
    }

    # V√©rifier les outils install√©s
    installed_tools = []
    for tool, paths in recon_tools.items():
        for path in paths:
            if os.path.exists(os.path.expanduser(path)) or shutil.which(tool.lower()):
                installed_tools.append(tool)
                break

    # Fusion modules + outils
    all_items = python_modules + installed_tools

    if not all_items:
        console.print("[red]‚ùå Aucun module ou outil √† d√©sinstaller.[/red]")
        input(f"\n{yellow}Appuyez sur Entr√©e pour revenir...{reset}")
        return

    # Affichage
    table = Table(show_header=True, header_style="bold magenta", title="Modules & Outils Install√©s")
    table.add_column("N¬∞", style="cyan", width=4)
    table.add_column("Nom", style="green")
    table.add_column("Type", style="yellow")

    for i, name in enumerate(all_items, 1):
        kind = "Module Python" if i <= len(python_modules) else "Outil Reconnaissance"
        table.add_row(str(i), name, kind)

    console.print(table)
    console.print(f"\n[cyan]0.[/cyan] Annuler")

    # Choix utilisateur
    try:
        to_uninstall = input(f"{yellow}Entrez les num√©ros √† d√©sinstaller (s√©par√©s par des virgules), ou 0 : {reset}").strip()
        if not to_uninstall or to_uninstall == "0":
            console.print("[blue]‚Ü© Aucune d√©sinstallation effectu√©e[/blue]")
            return

        indexes = [int(i.strip()) - 1 for i in to_uninstall.split(",")]

        for idx in indexes:
            if 0 <= idx < len(all_items):
                item = all_items[idx]

                # Python module
                if idx < len(python_modules):
                    subprocess.run(f"pip uninstall -y {item}", shell=True)
                    console.print(f"[green]‚úî {item} d√©sinstall√©[/green]")

                # Reconnaissance tool
                else:
                    paths = recon_tools.get(item, [])
                    for path in paths:
                        expanded = os.path.expanduser(path)
                        if os.path.exists(expanded):
                            if os.path.isfile(expanded):
                                os.remove(expanded)
                            else:
                                subprocess.run(f"rm -rf '{expanded}'", shell=True)
                    console.print(f"[green]‚úî {item} supprim√©[/green]")
            else:
                console.print(f"[red]‚ùå Index invalide : {idx + 1}[/red]")

    except Exception as e:
        console.print(f"[red]‚ùå Erreur : {e}[/red]")

    input(f"\n{yellow}Appuyez sur Entr√©e pour revenir au menu...{reset}")

def full_reset():
    """
    R√©initialisation compl√®te du syst√®me :
    - Termine les processus des outils de reconnaissance
    - Nettoie les d√©pendances globales (Go/pip)
    - Supprime les outils de reconnaissance
    - Effectue un nettoyage approfondi
    - D√©sinstalle les paquets non essentiels
    """
    # Confirmation avant action
    if not confirm_action("R√âINITIALISATION COMPL√àTE du syst√®me (Cette action est irr√©versible)"):
        console.print("[red]‚ùå Annulation de la r√©initialisation compl√®te[/red]")
        return

    console.print(Panel(
        "[bold red]üí• D√âBUT DE LA R√âINITIALISATION COMPL√àTE[/bold red]",
        border_style="red"
    ))

    # ==============================================
    # 1. Terminer les processus en cours
    # ==============================================
    console.print("[yellow]üî´ Termination des processus critiques...[/yellow]")
    for tool in RECON_TOOLS:
        kill_running_process(tool.lower())
    time.sleep(1)  # Pause pour laisser le temps aux processus de se terminer

    # ==============================================
    # 2. Nettoyage des d√©pendances globales
    # ==============================================
    console.print("[yellow]üßπ Nettoyage des d√©pendances globales...[/yellow]")
    clean_global_deps()

    # ==============================================
    # 3. Suppression des outils de reconnaissance
    # ==============================================
    console.print("[yellow]üóëÔ∏è Suppression des outils de reconnaissance...[/yellow]")
    removed_tools = []
    for tool, paths in RECON_TOOLS.items():
        tool_removed = False
        for path in paths:
            expanded_path = os.path.expanduser(path)
            if os.path.exists(expanded_path):
                try:
                    if os.path.isfile(expanded_path):
                        os.remove(expanded_path)
                    else:
                        subprocess.run(f"rm -rf {expanded_path}", shell=True)
                    tool_removed = True
                    log_action("Suppression", f"{tool} ({expanded_path})")
                except Exception as e:
                    console.print(f"[red]‚ùå Erreur lors de la suppression de {tool}: {str(e)}[/red]")
        
        if tool_removed:
            removed_tools.append(tool)

    if removed_tools:
        console.print(f"[green]‚úî Outils supprim√©s: {', '.join(removed_tools)}[/green]")
    else:
        console.print("[blue]‚Ñπ Aucun outil suppl√©mentaire √† supprimer[/blue]")

    # ==============================================
    # 4. Nettoyage approfondi
    # ==============================================
    console.print("[yellow]üßΩ Nettoyage approfondi du syst√®me...[/yellow]")
    deep_clean()  # Utilise la fonction existante mais am√©lior√©e

    # ==============================================
    # 5. D√©sinstallation des paquets non essentiels
    # ==============================================
    console.print("[yellow]üì¶ D√©sinstallation des paquets non essentiels...[/yellow]")
    try:
        # Liste des paquets essentiels √† conserver
        essential_pkgs = ["termux-api", "termux-tools", "python", "openssh"]
        
        # G√©n√©rer la liste des paquets √† d√©sinstaller
        cmd = "pkg list-installed | grep -v 'core' | awk '{print $1}'"
        installed = subprocess.check_output(cmd, shell=True, text=True).splitlines()
        
        # Filtrer les paquets essentiels
        to_remove = [pkg for pkg in installed if pkg not in essential_pkgs]
        
        if to_remove:
            console.print(f"[cyan]‚Üí Paquets √† d√©sinstaller: {len(to_remove)}[/cyan]")
            subprocess.run(f"pkg uninstall -y {' '.join(to_remove)}", shell=True)
            console.print("[green]‚úî D√©sinstallation des paquets termin√©e[/green]")
        else:
            console.print("[blue]‚Ñπ Aucun paquet suppl√©mentaire √† d√©sinstaller[/blue]")
    except Exception as e:
        console.print(f"[red]‚ùå Erreur lors de la d√©sinstallation des paquets: {str(e)}[/red]")

    # ==============================================
    # 6. Suppression des fichiers de configuration
    # ==============================================
    console.print("[yellow]üìÇ Nettoyage des fichiers de configuration...[/yellow]")
    config_files = [
        "~/.bashrc", "~/.zshrc", "~/.profile",
        "~/.cache", "~/.config", "~/.local"
    ]
    
    for config in config_files:
        expanded_path = os.path.expanduser(config)
        if os.path.exists(expanded_path):
            try:
                if os.path.isfile(expanded_path):
                    os.remove(expanded_path)
                else:
                    subprocess.run(f"rm -rf {expanded_path}", shell=True)
                log_action("Suppression config", expanded_path)
            except Exception as e:
                console.print(f"[red]‚ùå Erreur suppression {config}: {str(e)}[/red]")

    # ==============================================
    # Finalisation
    # ==============================================
    console.print(Panel(
        "[bold green]‚úÖ R√âINITIALISATION COMPL√àTE TERMIN√âE[/bold green]\n"
        "Il est recommand√© de red√©marrer Termux",
        border_style="green"
    ))
    
    # Sauvegarde du rapport
    with open(os.path.expanduser("~/reset_report.txt"), "w") as f:
        f.write(f"SuperCleaner - Rapport de r√©initialisation\n")
        f.write(f"Date: {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"Outils supprim√©s: {', '.join(removed_tools) if removed_tools else 'Aucun'}\n")
        f.write(f"Paquets d√©sinstall√©s: {len(to_remove) if 'to_remove' in locals() else 0}\n")
    
    log_action("R√©initialisation", "Termin√©e avec succ√®s")
    
# ==============================================
# Main modifi√©
# ==============================================

# === MENUS PRINCIPAUX ===
def show_main_menu():
    """Menu principal r√©organis√©"""
    menu_options = [
        "[1] Options de nettoyage",
        "[2] Gestion des modules Python",
        "[3] Sauvegarde",
        "[4] Restauration",
        "[5] Quitter"
    ]
    
    console.print(Panel(
        "\n".join(menu_options),
        title="[bold cyan]MENU PRINCIPAL[/bold cyan]",
        border_style="green"
    ))

# === SOUS-MENUS ===
def show_cleaning_menu():
    """Menu des options de nettoyage"""
    menu_options = [
        "[1] Nettoyage l√©ger",
        "[2] Nettoyage standard",
        "[3] Nettoyage approfondi", 
        "[4] Nettoyage COMPLET",
        "[5] Nettoyage des d√©pendances",
        "[6] Simulation de nettoyage",
        "[7] Retour"
    ]
    
    console.print(Panel(
        "\n".join(menu_options),
        title="[bold cyan]OPTIONS DE NETTOYAGE[/bold cyan]",
        border_style="blue"
    ))

def show_backup_menu():
    """Menu des options de sauvegarde"""
    menu_options = [
        "[1] Sauvegarde standard",
        "[2] Sauvegarde des configurations",
        "[3] Sauvegarde incr√©mentielle",
        "[4] Sauvegarde brute (tout Termux)",
        "[5] Sauvegarde externe",
        "[6] G√©rer les sauvegardes",
        "[7] Retour"
    ]
    
    console.print(Panel(
        "\n".join(menu_options),
        title="[bold cyan]MENU DE SAUVEGARDE[/bold cyan]",
        border_style="magenta"
    ))

def show_restore_menu():
    """Menu des options de restauration"""
    menu_options = [
        "[1] Restauration standard", 
        "[2] Restauration des configurations",
        "[3] Restauration brute (tout Termux)",
        "[4] Restauration depuis stockage externe",
        "[5] Retour"
    ]
    
    console.print(Panel(
        "\n".join(menu_options),
        title="[bold cyan]MENU DE RESTAURATION[/bold cyan]",
        border_style="yellow"
    ))

def main():
    setup_logging()
    clear_screen()
    display_banner()
    
    if not check_permissions():
        sys.exit(1)
    
    while True:
        show_main_menu()
        choice = get_choice(1, 5)
        
        if choice == 1:  # Nettoyage
            while True:
                show_cleaning_menu()
                sub_choice = get_choice(1, 7)
                
                if sub_choice == 1:
                    if confirm_task("Nettoyage l√©ger"):
                        light_clean()
                elif sub_choice == 2:
                    if confirm_task("Nettoyage standard"):
                        standard_clean()
                elif sub_choice == 3:
                    if confirm_task("Nettoyage approfondi"):
                        deep_clean()
                elif sub_choice == 4:
                    if confirm_task("Nettoyage COMPLET"):
                        full_reset()
                elif sub_choice == 5:
                    if confirm_action("Nettoyer les d√©pendances globales"):
                        clean_global_deps()
                elif sub_choice == 6:
                    dry_run()
                elif sub_choice == 7:
                    break
                    
        elif choice == 2:  # Modules Python
            manage_python_modules()
            
        elif choice == 3:  # Sauvegarde
            while True:
                show_backup_menu()
                sub_choice = get_choice(1, 7)
                
                if sub_choice == 1:
                    backup_termux_standard()
                elif sub_choice == 2:
                    backup_configs_only()
                elif sub_choice == 3:
                    incremental_backup()
                elif sub_choice == 4:
                    backup_termux_alternative()
                elif sub_choice == 5:
                    backup_to_external()
                elif sub_choice == 6:
                    manage_backups()
                elif sub_choice == 7:
                    break
                    
        elif choice == 4:  # Restauration
            while True:
                show_restore_menu()
                sub_choice = get_choice(1, 5)
                
                if sub_choice == 1:
                    restore_termux()
                elif sub_choice == 2:
                    restore_configs_only()
                elif sub_choice == 3:
                    restore_termux_alternative()
                elif sub_choice == 4:
                    restore_from_external()
                elif sub_choice == 5:
                    break
                    
        elif choice == 5:  # Quitter
            if confirm_action("Quitter le programme"):
                sys.exit(0)
         
if __name__ == "__main__":
    main()
