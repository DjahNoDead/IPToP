#!/bin/bash

##############################################
# Script de gestion Xray avec multi-protocoles
# Am√©liorations :
# 1. Choix des ports personnalis√©s
# 2. Commentaires ajout√©s
# 3. Meilleure gestion des erreurs
##############################################

CONFIG_PATH="/usr/local/etc/xray/config.json"
Xray_BIN="/usr/local/bin/xray"
DOMAIN=""
EMAIL=""

# Ports configurables (valeurs par d√©faut)
PORTS=(
  ["VLESS_WS"]=10000
  ["TROJAN_WS"]=10001
  ["VLESS_TCP"]=10002
  ["TROJAN_TCP"]=10003
  ["VMESS"]=10004
  ["SHADOWSOCKS"]=10005
)

# Listes utilisateurs
UUIDS_VLESS_WS=()
UUIDS_VLESS_TCP=()
UUIDS_VMESS=()
PASSWORDS_TROJAN_WS=()
PASSWORDS_TROJAN_TCP=()
PASSWORDS_SS=()

##############################################
# G√©n√®re un UUID al√©atoire
# Retourne : UUID g√©n√©r√©
##############################################
generate_uuid() {
  cat /proc/sys/kernel/random/uuid || {
    echo "‚ùå Erreur lors de la g√©n√©ration d'UUID" >&2
    exit 1
  }
}

##############################################
# G√©n√®re un mot de passe al√©atoire
# Retourne : Mot de passe de 16 caract√®res
##############################################
random_password() {
  tr -dc A-Za-z0-9 </dev/urandom | head -c 16 || {
    echo "‚ùå Erreur lors de la g√©n√©ration du mot de passe" >&2
    exit 1
  }
}

##############################################
# V√©rifie que le script est ex√©cut√© en root
# Sort en erreur si ce n'est pas le root
##############################################
check_root() {
  if [ "$EUID" -ne 0 ]; then
    echo "‚ö†Ô∏è Ce script doit √™tre lanc√© en root." >&2
    exit 1
  fi
}

##############################################
# Pause l'ex√©cution jusqu'√† appui sur Entr√©e
##############################################
pause() {
  read -rp "Appuyez sur Entr√©e pour continuer..."
}

##############################################
# Configure les ports personnalis√©s
##############################################
configure_ports() {
  echo "=== Configuration des ports ==="
  echo "Laissez vide pour utiliser les valeurs par d√©faut"
  
  read -rp "Port VLESS WS (d√©faut ${PORTS[VLESS_WS]}): " input
  [ -n "$input" ] && PORTS["VLESS_WS"]=$input
  
  read -rp "Port Trojan WS (d√©faut ${PORTS[TROJAN_WS]}): " input
  [ -n "$input" ] && PORTS["TROJAN_WS"]=$input
  
  read -rp "Port VLESS TCP (d√©faut ${PORTS[VLESS_TCP]}): " input
  [ -n "$input" ] && PORTS["VLESS_TCP"]=$input
  
  read -rp "Port Trojan TCP (d√©faut ${PORTS[TROJAN_TCP]}): " input
  [ -n "$input" ] && PORTS["TROJAN_TCP"]=$input
  
  read -rp "Port VMess (d√©faut ${PORTS[VMESS]}): " input
  [ -n "$input" ] && PORTS["VMESS"]=$input
  
  read -rp "Port Shadowsocks (d√©faut ${PORTS[SHADOWSOCKS]}): " input
  [ -n "$input" ] && PORTS["SHADOWSOCKS"]=$input
  
  echo "‚úÖ Ports configur√©s :"
  for proto in "${!PORTS[@]}"; do
    echo "- $proto : ${PORTS[$proto]}"
  done
  pause
}

##############################################
# Charge la configuration existante
##############################################
load_config() {
  if [ -f "$CONFIG_PATH" ]; then
    echo "üîÑ Chargement de la configuration existante..."
    DOMAIN=$(grep -oP '(?<=server_name )[^;]+' /etc/nginx/sites-available/"$DOMAIN".conf 2>/dev/null) || {
      echo "‚ö†Ô∏è Impossible de charger le domaine depuis Nginx"
      DOMAIN=""
    }
    
    # Chargement des utilisateurs existants
    UUIDS_VLESS_WS=($(jq -r '.inbounds[] | select(.protocol=="vless" and .streamSettings.network=="ws") | .settings.clients[].id' "$CONFIG_PATH" 2>/dev/null || echo ""))
    UUIDS_VLESS_TCP=($(jq -r '.inbounds[] | select(.protocol=="vless" and .streamSettings.network=="tcp") | .settings.clients[].id' "$CONFIG_PATH" 2>/dev/null || echo ""))
    UUIDS_VMESS=($(jq -r '.inbounds[] | select(.protocol=="vmess") | .settings.clients[].id' "$CONFIG_PATH" 2>/dev/null || echo ""))
    PASSWORDS_TROJAN_WS=($(jq -r '.inbounds[] | select(.protocol=="trojan" and .streamSettings.network=="ws") | .settings.clients[].password' "$CONFIG_PATH" 2>/dev/null || echo ""))
    PASSWORDS_TROJAN_TCP=($(jq -r '.inbounds[] | select(.protocol=="trojan" and .streamSettings.network=="tcp") | .settings.clients[].password' "$CONFIG_PATH" 2>/dev/null || echo ""))
    PASSWORDS_SS=($(jq -r '.inbounds[] | select(.protocol=="shadowsocks") | .settings.clients[].password' "$CONFIG_PATH" 2>/dev/null || echo ""))
    
    # Chargement des ports depuis la config existante
    PORTS["VLESS_WS"]=$(jq -r '.inbounds[] | select(.protocol=="vless" and .streamSettings.network=="ws") | .port' "$CONFIG_PATH" 2>/dev/null || echo "10000")
    PORTS["TROJAN_WS"]=$(jq -r '.inbounds[] | select(.protocol=="trojan" and .streamSettings.network=="ws") | .port' "$CONFIG_PATH" 2>/dev/null || echo "10001")
    PORTS["VLESS_TCP"]=$(jq -r '.inbounds[] | select(.protocol=="vless" and .streamSettings.network=="tcp") | .port' "$CONFIG_PATH" 2>/dev/null || echo "10002")
    PORTS["TROJAN_TCP"]=$(jq -r '.inbounds[] | select(.protocol=="trojan" and .streamSettings.network=="tcp") | .port' "$CONFIG_PATH" 2>/dev/null || echo "10003")
    PORTS["VMESS"]=$(jq -r '.inbounds[] | select(.protocol=="vmess") | .port' "$CONFIG_PATH" 2>/dev/null || echo "10004")
    PORTS["SHADOWSOCKS"]=$(jq -r '.inbounds[] | select(.protocol=="shadowsocks") | .port' "$CONFIG_PATH" 2>/dev/null || echo "10005")
  fi
}

##############################################
# Sauvegarde la configuration dans config.json
# Gestion am√©lior√©e des erreurs
##############################################
save_config() {
  echo "üîÑ Sauvegarde de la configuration..."
  
  # Pr√©paration des clients pour chaque protocole
  local vless_ws_clients=""
  local vless_tcp_clients=""
  local vmess_clients=""
  local trojan_ws_clients=""
  local trojan_tcp_clients=""
  local ss_clients=""

  for uuid in "${UUIDS_VLESS_WS[@]}"; do
    vless_ws_clients+="{\"id\":\"$uuid\",\"level\":0,\"email\":\"user@vless-ws\"},"
  done
  vless_ws_clients=${vless_ws_clients%,}

  for uuid in "${UUIDS_VLESS_TCP[@]}"; do
    vless_tcp_clients+="{\"id\":\"$uuid\",\"level\":0,\"email\":\"user@vless-tcp\"},"
  done
  vless_tcp_clients=${vless_tcp_clients%,}

  for uuid in "${UUIDS_VMESS[@]}"; do
    vmess_clients+="{\"id\":\"$uuid\",\"alterId\":0,\"email\":\"user@vmess\"},"
  done
  vmess_clients=${vmess_clients%,}

  for pwd in "${PASSWORDS_TROJAN_WS[@]}"; do
    trojan_ws_clients+="{\"password\":\"$pwd\"},"
  done
  trojan_ws_clients=${trojan_ws_clients%,}

  for pwd in "${PASSWORDS_TROJAN_TCP[@]}"; do
    trojan_tcp_clients+="{\"password\":\"$pwd\"},"
  done
  trojan_tcp_clients=${trojan_tcp_clients%,}

  for pwd in "${PASSWORDS_SS[@]}"; do
    ss_clients+="{\"password\":\"$pwd\",\"method\":\"aes-128-gcm\"},"
  done
  ss_clients=${ss_clients%,}

  # √âcriture du fichier de configuration
  cat > "$CONFIG_PATH" <<EOF
{
  "log": {
    "access": "/var/log/xray/access.log",
    "error": "/var/log/xray/error.log",
    "loglevel": "warning"
  },
  "inbounds": [
    {
      "port": ${PORTS[VLESS_WS]},
      "protocol": "vless",
      "settings": {
        "clients": [
          $vless_ws_clients
        ],
        "decryption": "none"
      },
      "streamSettings": {
        "network": "ws",
        "wsSettings": {
          "path": "/ws"
        }
      }
    },
    {
      "port": ${PORTS[TROJAN_WS]},
      "protocol": "trojan",
      "settings": {
        "clients": [
          $trojan_ws_clients
        ]
      },
      "streamSettings": {
        "network": "ws",
        "wsSettings": {
          "path": "/ws"
        }
      }
    },
    {
      "port": ${PORTS[VLESS_TCP]},
      "protocol": "vless",
      "settings": {
        "clients": [
          $vless_tcp_clients
        ],
        "decryption": "none"
      },
      "streamSettings": {
        "network": "tcp",
        "security": "tls",
        "tlsSettings": {}
      }
    },
    {
      "port": ${PORTS[TROJAN_TCP]},
      "protocol": "trojan",
      "settings": {
        "clients": [
          $trojan_tcp_clients
        ]
      },
      "streamSettings": {
        "network": "tcp",
        "security": "tls",
        "tlsSettings": {}
      }
    },
    {
      "port": ${PORTS[VMESS]},
      "protocol": "vmess",
      "settings": {
        "clients": [
          $vmess_clients
        ]
      },
      "streamSettings": {
        "network": "ws",
        "wsSettings": {
          "path": "/vmessws"
        }
      }
    },
    {
      "port": ${PORTS[SHADOWSOCKS]},
      "protocol": "shadowsocks",
      "settings": {
        "clients": [
          $ss_clients
        ],
        "method": "aes-128-gcm"
      },
      "streamSettings": {
        "network": "tcp"
      }
    }
  ],
  "outbounds": [
    {
      "protocol": "freedom"
    }
  ]
}
EOF

  # V√©rification que le fichier a bien √©t√© cr√©√©
  if [ ! -f "$CONFIG_PATH" ]; then
    echo "‚ùå Erreur : impossible de cr√©er le fichier de configuration" >&2
    return 1
  fi
  
  # V√©rification que le JSON est valide
  if ! jq empty "$CONFIG_PATH" >/dev/null 2>&1; then
    echo "‚ùå Erreur : fichier de configuration JSON invalide" >&2
    return 1
  fi
  
  echo "‚úÖ Configuration sauvegard√©e avec succ√®s"
  return 0
}

##############################################
# Installation compl√®te des composants
# Avec gestion am√©lior√©e des erreurs
##############################################
install_all() {
  echo "üîÑ Mise √† jour et installation des paquets..."
  if ! apt update; then
    echo "‚ùå Erreur lors de la mise √† jour des paquets" >&2
    return 1
  fi
  
  if ! apt upgrade -y; then
    echo "‚ö†Ô∏è Attention : √©chec partiel de la mise √† jour des paquets" >&2
  fi
  
  if ! apt install -y curl wget unzip nginx socat ufw certbot python3-certbot-nginx fail2ban jq; then
    echo "‚ùå Erreur lors de l'installation des paquets requis" >&2
    return 1
  fi

  echo "‚úÖ Configuration UFW..."
  ufw allow 'OpenSSH' || echo "‚ö†Ô∏è Impossible d'autoriser OpenSSH dans UFW" >&2
  ufw allow 80 || echo "‚ö†Ô∏è Impossible d'autoriser le port 80 dans UFW" >&2
  ufw allow 443 || echo "‚ö†Ô∏è Impossible d'autoriser le port 443 dans UFW" >&2
  ufw --force enable || {
    echo "‚ùå Impossible d'activer UFW" >&2
    return 1
  }

  echo "‚úÖ Activation Fail2ban..."
  systemctl enable fail2ban || echo "‚ö†Ô∏è Impossible d'activer Fail2ban" >&2
  systemctl start fail2ban || {
    echo "‚ùå Impossible de d√©marrer Fail2ban" >&2
    return 1
  }

  echo "‚úÖ Installation Xray-core..."
  if ! bash <(curl -Ls https://raw.githubusercontent.com/XTLS/Xray-install/main/install-release.sh); then
    echo "‚ùå Erreur lors de l'installation de Xray" >&2
    return 1
  fi

  mkdir -p /usr/local/etc/xray || {
    echo "‚ùå Impossible de cr√©er le dossier de configuration Xray" >&2
    return 1
  }
  
  mkdir -p /var/log/xray || {
    echo "‚ö†Ô∏è Impossible de cr√©er le dossier de logs Xray" >&2
  }

  # Demande des ports personnalis√©s
  configure_ports

  read -rp "‚û°Ô∏è Entrez le nom de domaine FRONTEND (exemple : proxy.exemple.com) : " DOMAIN
  if [[ -z "$DOMAIN" ]]; then
    echo "‚ùå Domaine invalide" >&2
    return 1
  fi

  read -rp "‚û°Ô∏è Entrez votre email pour Let's Encrypt : " EMAIL
  if [[ ! "$EMAIL" =~ ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$ ]]; then
    echo "‚ùå Email invalide" >&2
    return 1
  fi

  echo "‚úÖ Obtention certificat TLS..."
  rm -f /etc/nginx/sites-enabled/default
  cat > /etc/nginx/sites-available/"$DOMAIN".conf <<EOF
server {
    listen 80;
    server_name $DOMAIN;
    location / {
        return 301 https://\$host\$request_uri;
    }
}
EOF

  ln -sf /etc/nginx/sites-available/"$DOMAIN".conf /etc/nginx/sites-enabled/ || {
    echo "‚ùå Impossible de cr√©er le lien symbolique Nginx" >&2
    return 1
  }

  if ! nginx -t; then
    echo "‚ùå Configuration Nginx invalide" >&2
    return 1
  fi
  
  systemctl reload nginx || {
    echo "‚ùå Impossible de recharger Nginx" >&2
    return 1
  }

  if ! certbot --nginx -d "$DOMAIN" --email "$EMAIL" --agree-tos --non-interactive; then
    echo "‚ùå Erreur lors de l'obtention du certificat TLS" >&2
    return 1
  fi

  echo "‚úÖ Configuration Nginx reverse proxy..."
  cat > /etc/nginx/sites-available/"$DOMAIN".conf <<EOF
server {
    listen 443 ssl http2;
    server_name $DOMAIN;

    ssl_certificate /etc/letsencrypt/live/$DOMAIN/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$DOMAIN/privkey.pem;

    location /ws {
        proxy_redirect off;
        proxy_pass http://127.0.0.1:${PORTS[VLESS_WS]};
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
    }
    location /vmessws {
        proxy_redirect off;
        proxy_pass http://127.0.0.1:${PORTS[VMESS]};
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
    }
    location / {
        root /var/www/html;
        index index.html;
    }
}
EOF

  if ! nginx -t; then
    echo "‚ùå Configuration Nginx invalide apr√®s modification" >&2
    return 1
  fi
  
  systemctl reload nginx || {
    echo "‚ùå Impossible de recharger Nginx apr√®s modification" >&2
    return 1
  }

  # Init arrays
  UUIDS_VLESS_WS=()
  UUIDS_VLESS_TCP=()
  UUIDS_VMESS=()
  PASSWORDS_TROJAN_WS=()
  PASSWORDS_TROJAN_TCP=()
  PASSWORDS_SS=()

  # G√©n√©rer 1 utilisateur de chaque type par d√©faut
  UUIDS_VLESS_WS+=("$(generate_uuid)") || return 1
  UUIDS_VLESS_TCP+=("$(generate_uuid)") || return 1
  UUIDS_VMESS+=("$(generate_uuid)") || return 1
  PASSWORDS_TROJAN_WS+=("$(random_password)") || return 1
  PASSWORDS_TROJAN_TCP+=("$(random_password)") || return 1
  PASSWORDS_SS+=("$(random_password)") || return 1

  save_config || return 1

  # Cr√©er service systemd
  cat > /etc/systemd/system/xray.service <<EOF
[Unit]
Description=Service Xray
After=network.target

[Service]
User=nobody
ExecStart=$Xray_BIN run -c $CONFIG_PATH
Restart=on-failure

[Install]
WantedBy=multi-user.target
EOF

  systemctl daemon-reexec || echo "‚ö†Ô∏è Impossible de recharger le d√©mon systemd" >&2
  systemctl enable xray || {
    echo "‚ùå Impossible d'activer le service Xray" >&2
    return 1
  }
  
  systemctl restart xray || {
    echo "‚ùå Impossible de d√©marrer Xray" >&2
    return 1
  }

  echo "‚úÖ Installation termin√©e avec un utilisateur par protocole cr√©√©."
  generate_links
  pause
}

##############################################
# Ajoute un utilisateur selon le protocole
# Gestion des erreurs am√©lior√©e
##############################################
add_user() {
  echo "=== Ajouter un utilisateur ==="
  echo "1) VLESS WS"
  echo "2) VLESS TCP"
  echo "3) VMess WS"
  echo "4) Trojan WS"
  echo "5) Trojan TCP"
  echo "6) Shadowsocks TCP"
  echo "0) Retour"
  read -rp "Choisissez le type d'utilisateur √† ajouter : " choice
  
  case $choice in
    1)
      if ! id=$(generate_uuid); then
        pause
        return 1
      fi
      UUIDS_VLESS_WS+=("$id")
      echo "Utilisateur VLESS WS ajout√© : $id"
      ;;
    2)
      if ! id=$(generate_uuid); then
        pause
        return 1
      fi
      UUIDS_VLESS_TCP+=("$id")
      echo "Utilisateur VLESS TCP ajout√© : $id"
      ;;
    3)
      if ! id=$(generate_uuid); then
        pause
        return 1
      fi
      UUIDS_VMESS+=("$id")
      echo "Utilisateur VMess WS ajout√© : $id"
      ;;
    4)
      if ! pwd=$(random_password); then
        pause
        return 1
      fi
      PASSWORDS_TROJAN_WS+=("$pwd")
      echo "Utilisateur Trojan WS ajout√© : $pwd"
      ;;
    5)
      if ! pwd=$(random_password); then
        pause
        return 1
      fi
      PASSWORDS_TROJAN_TCP+=("$pwd")
      echo "Utilisateur Trojan TCP ajout√© : $pwd"
      ;;
    6)
      if ! pwd=$(random_password); then
        pause
        return 1
      fi
      PASSWORDS_SS+=("$pwd")
      echo "Utilisateur Shadowsocks ajout√© : $pwd"
      ;;
    0) return ;;
    *) 
      echo "Option invalide." 
      pause
      return 1
      ;;
  esac
  
  if ! save_config; then
    echo "‚ùå Erreur lors de la sauvegarde de la configuration" >&2
    pause
    return 1
  fi
  
  echo "‚úÖ Utilisateur ajout√© et configuration mise √† jour."
  pause
}

##############################################
# Supprime un utilisateur selon le protocole
##############################################
remove_user() {
  echo "=== Supprimer un utilisateur ==="
  echo "1) VLESS WS"
  echo "2) VLESS TCP"
  echo "3) VMess WS"
  echo "4) Trojan WS"
  echo "5) Trojan TCP"
  echo "6) Shadowsocks TCP"
  echo "0) Retour"
  read -rp "Choisissez le type d'utilisateur √† supprimer : " choice
  
  case $choice in
    1)
      if [ ${#UUIDS_VLESS_WS[@]} -eq 0 ]; then
        echo "‚ùå Aucun utilisateur VLESS WS √† supprimer"
        pause
        return
      fi
      
      echo "Utilisateurs VLESS WS existants :"
      for i in "${!UUIDS_VLESS_WS[@]}"; do
        echo "$i) ${UUIDS_VLESS_WS[$i]}"
      done
      read -rp "Entrez le num√©ro de l'utilisateur √† supprimer : " num
      
      if [[ "$num" =~ ^[0-9]+$ ]] && [ "$num" -ge 0 ] && [ "$num" -lt "${#UUIDS_VLESS_WS[@]}" ]; then
        unset 'UUIDS_VLESS_WS[num]'
        UUIDS_VLESS_WS=("${UUIDS_VLESS_WS[@]}")
        echo "‚úÖ Utilisateur supprim√©."
      else
        echo "‚ùå Num√©ro invalide."
      fi
      ;;
      
    2)
      if [ ${#UUIDS_VLESS_TCP[@]} -eq 0 ]; then
        echo "‚ùå Aucun utilisateur VLESS TCP √† supprimer"
        pause
        return
      fi
      
      echo "Utilisateurs VLESS TCP existants :"
      for i in "${!UUIDS_VLESS_TCP[@]}"; do
        echo "$i) ${UUIDS_VLESS_TCP[$i]}"
      done
      read -rp "Entrez le num√©ro de l'utilisateur √† supprimer : " num
      
      if [[ "$num" =~ ^[0-9]+$ ]] && [ "$num" -ge 0 ] && [ "$num" -lt "${#UUIDS_VLESS_TCP[@]}" ]; then
        unset 'UUIDS_VLESS_TCP[num]'
        UUIDS_VLESS_TCP=("${UUIDS_VLESS_TCP[@]}")
        echo "‚úÖ Utilisateur supprim√©."
      else
        echo "‚ùå Num√©ro invalide."
      fi
      ;;
      
    3)
      if [ ${#UUIDS_VMESS[@]} -eq 0 ]; then
        echo "‚ùå Aucun utilisateur VMess √† supprimer"
        pause
        return
      fi
      
      echo "Utilisateurs VMess existants :"
      for i in "${!UUIDS_VMESS[@]}"; do
        echo "$i) ${UUIDS_VMESS[$i]}"
      done
      read -rp "Entrez le num√©ro de l'utilisateur √† supprimer : " num
      
      if [[ "$num" =~ ^[0-9]+$ ]] && [ "$num" -ge 0 ] && [ "$num" -lt "${#UUIDS_VMESS[@]}" ]; then
        unset 'UUIDS_VMESS[num]'
        UUIDS_VMESS=("${UUIDS_VMESS[@]}")
        echo "‚úÖ Utilisateur supprim√©."
      else
        echo "‚ùå Num√©ro invalide."
      fi
      ;;
      
    4)
      if [ ${#PASSWORDS_TROJAN_WS[@]} -eq 0 ]; then
        echo "‚ùå Aucun utilisateur Trojan WS √† supprimer"
        pause
        return
      fi
      
      echo "Utilisateurs Trojan WS existants :"
      for i in "${!PASSWORDS_TROJAN_WS[@]}"; do
        echo "$i) ${PASSWORDS_TROJAN_WS[$i]}"
      done
      read -rp "Entrez le num√©ro de l'utilisateur √† supprimer : " num
      
      if [[ "$num" =~ ^[0-9]+$ ]] && [ "$num" -ge 0 ] && [ "$num" -lt "${#PASSWORDS_TROJAN_WS[@]}" ]; then
        unset 'PASSWORDS_TROJAN_WS[num]'
        PASSWORDS_TROJAN_WS=("${PASSWORDS_TROJAN_WS[@]}")
        echo "‚úÖ Utilisateur supprim√©."
      else
        echo "‚ùå Num√©ro invalide."
      fi
      ;;
      
    5)
      if [ ${#PASSWORDS_TROJAN_TCP[@]} -eq 0 ]; then
        echo "‚ùå Aucun utilisateur Trojan TCP √† supprimer"
        pause
        return
      fi
      
      echo "Utilisateurs Trojan TCP existants :"
      for i in "${!PASSWORDS_TROJAN_TCP[@]}"; do
        echo "$i) ${PASSWORDS_TROJAN_TCP[$i]}"
      done
      read -rp "Entrez le num√©ro de l'utilisateur √† supprimer : " num
      
      if [[ "$num" =~ ^[0-9]+$ ]] && [ "$num" -ge 0 ] && [ "$num" -lt "${#PASSWORDS_TROJAN_TCP[@]}" ]; then
        unset 'PASSWORDS_TROJAN_TCP[num]'
        PASSWORDS_TROJAN_TCP=("${PASSWORDS_TROJAN_TCP[@]}")
        echo "‚úÖ Utilisateur supprim√©."
      else
        echo "‚ùå Num√©ro invalide."
      fi
      ;;
      
    6)
      if [ ${#PASSWORDS_SS[@]} -eq 0 ]; then
        echo "‚ùå Aucun utilisateur Shadowsocks √† supprimer"
        pause
        return
      fi
      
      echo "Utilisateurs Shadowsocks existants :"
      for i in "${!PASSWORDS_SS[@]}"; do
        echo "$i) ${PASSWORDS_SS[$i]}"
      done
      read -rp "Entrez le num√©ro de l'utilisateur √† supprimer : " num
      
      if [[ "$num" =~ ^[0-9]+$ ]] && [ "$num" -ge 0 ] && [ "$num" -lt "${#PASSWORDS_SS[@]}" ]; then
        unset 'PASSWORDS_SS[num]'
        PASSWORDS_SS=("${PASSWORDS_SS[@]}")
        echo "‚úÖ Utilisateur supprim√©."
      else
        echo "‚ùå Num√©ro invalide."
      fi
      ;;
      
    0) return ;;
    *) 
      echo "Option invalide."
      ;;
  esac
  
  if ! save_config; then
    echo "‚ùå Erreur lors de la sauvegarde de la configuration" >&2
  fi
  
  pause
}

##############################################
# G√©n√®re les liens de configuration clients
# V√©rifie que le domaine est configur√©
##############################################
generate_links() {
  echo "=== G√©n√©ration des liens clients ==="
  if [ -z "$DOMAIN" ]; then
    echo "‚ùå Domaine FRONTEND non configur√©."
    pause
    return 1
  fi

  cat > config_clients.txt <<EOF
===== Configurations clients Xray pour $DOMAIN =====
Ports utilis√©s:
- VLESS WS: ${PORTS[VLESS_WS]}
- Trojan WS: ${PORTS[TROJAN_WS]}
- VLESS TCP: ${PORTS[VLESS_TCP]}
- Trojan TCP: ${PORTS[TROJAN_TCP]}
- VMess: ${PORTS[VMESS]}
- Shadowsocks: ${PORTS[SHADOWSOCKS]}

-- VLESS WS TLS --
EOF

  for uuid in "${UUIDS_VLESS_WS[@]}"; do
    echo "vless://$uuid@$DOMAIN:443?encryption=none&security=tls&type=ws&path=%2Fws#$DOMAIN-VLESS-WS" >> config_clients.txt
  done

  echo -e "\n-- VLESS TCP TLS --" >> config_clients.txt
  for uuid in "${UUIDS_VLESS_TCP[@]}"; do
    echo "vless://$uuid@$DOMAIN:${PORTS[VLESS_TCP]}?security=tls&encryption=none&type=tcp#$DOMAIN-VLESS-TCP" >> config_clients.txt
  done

  echo -e "\n-- VMess WS TLS --" >> config_clients.txt
  for uuid in "${UUIDS_VMESS[@]}"; do
    vmess_json=$(jq -n --arg id "$uuid" --arg host "$DOMAIN" '{
      v: "2",
      ps: "vmess-ws",
      add: $host,
      port: "'${PORTS[VMESS]}'",
      id: $id,
      aid: "0",
      net: "ws",
      type: "none",
      host: $host,
      path: "/vmessws",
      tls: "tls"
    }')
    vmess_link="vmess://$(echo "$vmess_json" | base64 -w 0)"
    echo "$vmess_link" >> config_clients.txt
  done

  echo -e "\n-- Trojan WS TLS --" >> config_clients.txt
  for pwd in "${PASSWORDS_TROJAN_WS[@]}"; do
    echo "trojan://$pwd@$DOMAIN:443?security=tls&type=ws&path=%2Fws#$DOMAIN-Trojan-WS" >> config_clients.txt
  done

  echo -e "\n-- Trojan TCP TLS --" >> config_clients.txt
  for pwd in "${PASSWORDS_TROJAN_TCP[@]}"; do
    echo "trojan://$pwd@$DOMAIN:${PORTS[TROJAN_TCP]}?security=tls&type=tcp#$DOMAIN-Trojan-TCP" >> config_clients.txt
  done

  echo -e "\n-- Shadowsocks TCP --" >> config_clients.txt
  for pwd in "${PASSWORDS_SS[@]}"; do
    ss_link="ss://$(echo -n "aes-128-gcm:$pwd" | base64 -w 0)@$DOMAIN:${PORTS[SHADOWSOCKS]}#$DOMAIN-SS"
    echo "$ss_link" >> config_clients.txt
  done

  echo -e "\n===== Fin des configurations ====="
  echo "‚úÖ Les liens clients ont √©t√© enregistr√©s dans le fichier config_clients.txt"
  pause
}

##############################################
# Change le domaine frontend
# Avec v√©rification des entr√©es et gestion des erreurs
##############################################
changer_domaine() {
  read -rp "Entrez le nouveau domaine FRONTEND √† utiliser : " newdomain
  if [[ -z "$newdomain" ]]; then
    echo "‚ùå Domaine invalide."
    pause
    return 1
  fi
  
  read -rp "Confirmez votre email pour Let's Encrypt : " email
  if [[ ! "$email" =~ ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$ ]]; then
    echo "‚ùå Email invalide"
    pause
    return 1
  fi
  
  DOMAIN="$newdomain"
  EMAIL="$email"
  echo "‚úÖ Domaine FRONTEND modifi√© en : $DOMAIN"

  echo "üîÑ Reconfiguration de Nginx et renouvellement certificat TLS..."

  rm -f /etc/nginx/sites-enabled/*
  rm -f /etc/nginx/sites-available/*

  cat > /etc/nginx/sites-available/"$DOMAIN".conf <<EOF
server {
    listen 80;
    server_name $DOMAIN;
    location / {
        return 301 https://\$host\$request_uri;
    }
}
EOF

  if ! ln -sf /etc/nginx/sites-available/"$DOMAIN".conf /etc/nginx/sites-enabled/; then
    echo "‚ùå Impossible de cr√©er le lien symbolique Nginx" >&2
    return 1
  fi

  if ! nginx -t; then
    echo "‚ùå Configuration Nginx invalide" >&2
    return 1
  fi
  
  if ! systemctl reload nginx; then
    echo "‚ùå Impossible de recharger Nginx" >&2
    return 1
  fi

  if ! certbot --nginx -d "$DOMAIN" --email "$EMAIL" --agree-tos --non-interactive --redirect; then
    echo "‚ùå Erreur lors du renouvellement du certificat TLS" >&2
    return 1
  fi

  cat > /etc/nginx/sites-available/"$DOMAIN".conf <<EOF
server {
    listen 443 ssl http2;
    server_name $DOMAIN;

    ssl_certificate /etc/letsencrypt/live/$DOMAIN/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$DOMAIN/privkey.pem;

    location /ws {
        proxy_redirect off;
        proxy_pass http://127.0.0.1:${PORTS[VLESS_WS]};
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
    }
    location /vmessws {
        proxy_redirect off;
        proxy_pass http://127.0.0.1:${PORTS[VMESS]};
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
    }
    location / {
        root /var/www/html;
        index index.html;
    }
}
EOF

  if ! nginx -t; then
    echo "‚ùå Configuration Nginx invalide apr√®s modification" >&2
    return 1
  fi
  
  if ! systemctl reload nginx; then
    echo "‚ùå Impossible de recharger Nginx apr√®s modification" >&2
    return 1
  fi
  
  if ! systemctl restart xray; then
    echo "‚ö†Ô∏è Impossible de red√©marrer Xray" >&2
  fi

  echo "‚úÖ Domaine et certificat mis √† jour avec succ√®s"
  pause
}

##############################################
# Affiche le menu principal
##############################################
show_menu() {
  clear
  echo "==============================="
  echo "         Gestion Xray VPS       "
  echo "==============================="
  echo "Domaine FRONTEND actuel : ${DOMAIN:-Non configur√©}"
  echo ""
  echo "1) Installer Xray + Nginx + TLS"
  echo "2) Ajouter un utilisateur"
  echo "3) Supprimer un utilisateur"
  echo "4) G√©n√©rer et afficher les liens clients"
  echo "5) Modifier le domaine FRONTEND"
  echo "6) Configurer les ports"
  echo "7) Red√©marrer Xray"
  echo "0) Quitter"
  echo ""
  echo -n "Choisissez une option : "
}

##############################################
# Point d'entr√©e principal du script
##############################################
check_root
load_config

while true; do
  show_menu
  read -r choice
  case $choice in
    1) install_all ;;
    2) add_user ;;
    3) remove_user ;;
    4) generate_links ;;
    5) changer_domaine ;;
    6) configure_ports ;;
    7) 
      systemctl restart xray && echo "‚úÖ Xray red√©marr√©." || echo "‚ùå √âchec du red√©marrage de Xray" >&2
      pause 
      ;;
    0) 
      echo "üëã Au revoir !" 
      exit 0 
      ;;
    *) 
      echo "‚ùå Option invalide." 
      pause 
      ;;
  esac
done